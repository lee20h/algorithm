(window.webpackJsonp=window.webpackJsonp||[]).push([[111],{459:function(t,s,a){"use strict";a.r(s);var n=a(25),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"statement-level-control-structure"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#statement-level-control-structure"}},[t._v("#")]),t._v(" Statement-Level Control Structure")]),t._v(" "),a("h2",{attrs:{id:"control-structure"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#control-structure"}},[t._v("#")]),t._v(" Control Structure")]),t._v(" "),a("p",[t._v("if문 else문"),a("br"),t._v("\nSelection Statements"),a("br"),t._v("\n2개의 조건 : if-else"),a("br"),t._v("\n여러개의 조건 : switch")]),t._v(" "),a("p",[t._v("C와 C++, 파이썬에서는 if 조건절에 boolean이 아닌 숫자도 가능하다.")]),t._v(" "),a("h2",{attrs:{id:"nesting-selectors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nesting-selectors"}},[t._v("#")]),t._v(" Nesting Selectors")]),t._v(" "),a("p",[t._v("Java에서 if문 속 if가 존재할 때 else가 있다면 가장 가까운 if와 연결된다. 아니면 괄호로 묶어줘야한다.")]),t._v(" "),a("p",[t._v("Funtional Language에서는 Selector의 결과가 무조건 값이다.")]),t._v(" "),a("p",[a("strong",[t._v("C언어에서는 switch")]),t._v(" 조건절에는 무조건 정수가 들어와야한다."),a("br"),t._v("\n정수랑 실수를 비교해도 속도차이가 많이 난다."),a("br"),t._v("\nbreak절 전까지 다 실행이 가능하다.")]),t._v(" "),a("p",[a("em",[t._v("C#과 비교")]),a("br"),t._v("\nC언어에서는 조건절에서는 정수만 가능하지만, C#에서는 정수와 문자열을 허용한다. 그리고 C#에서는 여러 케이스가 계속 실행되는 것을 허용하지 않는다. 따라서 한 케이스마다 goto나 break가 나와야한다.")]),t._v(" "),a("p",[t._v("Scheme에서의 Multiple Selector")]),t._v(" "),a("div",{staticClass:"language-s extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("(COND\n\t(predicate1 expression)\n\t...\n\t(predicaten expression)\n\t[ (ELSE expression n+1)]\n)\n")])])]),a("p",[t._v("조건 predicate가 참일 경우 expression 실행")]),t._v(" "),a("h2",{attrs:{id:"반복문"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#반복문"}},[t._v("#")]),t._v(" 반복문")]),t._v(" "),a("p",[t._v("Counter-Controlled Loops (for문)"),a("br"),t._v("\ninitial, terminal, stepsize")]),t._v(" "),a("p",[t._v("C와 C++의 for문의 차이는 조건절에 C에서는 다 정수이지만, C++에서는 bool타입도 들어갈 수 있다는 점과 초기화절에서 변수 정의 유무이다."),a("br"),t._v("\nJava와 C#랑 C++의 차이로는 Java와 C#은 무조건 bool타입이여야한다.")]),t._v(" "),a("p",[t._v("Python의 for문에서는 else가 있을 수 있는데 이때의 else는 for문이 정상적으로 종료되야 실행된다. 또한, 범위를 잡을 수 있는데 전에 공부한 범위를 잡던 것 처럼 범위를 잡으면 된다. ex) range(5) = [0,1,2,3,4]"),a("br"),t._v("\nrange(2, 7) = [2,3,4,5,6] range(0, 8, 2) = [0,2,4,6]")]),t._v(" "),a("h2",{attrs:{id:"funtional-language에서의-loop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#funtional-language에서의-loop"}},[t._v("#")]),t._v(" Funtional Language에서의 Loop")]),t._v(" "),a("p",[t._v("명령형 언어에서는 counter 변수를 가지고 loop을 돌지만 함수형 언어에서는 재귀호출을 통해서 반복을 구현한다.")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("명령형\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\ts "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n함수형 "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 속도가 느림")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("C와 C++은 while처럼 먼저 조건절을 보고 반복하거나 do_while처럼 실행 후 조건절을 보는 경우 둘 다 가능하다. 그리고 조건절에서는 산술이 가능하다."),a("br"),t._v("\nJava에 경우에는 조건절은 boolean형이여야 하며 반복문에서 goto가 불가능하다.")]),t._v(" "),a("h2",{attrs:{id:"반복자를-통한-반복"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#반복자를-통한-반복"}},[t._v("#")]),t._v(" 반복자를 통한 반복")]),t._v(" "),a("p",[t._v("흔히 아는 iterator을 가지고 반복을 하면 된다. C언어에서는 기본적으로 제공하지 않아서 유저가 직접 정의해서 사용해야한다."),a("br"),t._v("\nPHP에서는 iterator을 먼저 정의해서 사용하면 된다."),a("br"),t._v("\n키워드"),a("br"),t._v("\ncurrent : 현재 위치의 원소 반환"),a("br"),t._v("\nnext : 현재 위치에서 다음 위치로 이동"),a("br"),t._v("\nreset : 첫번째 원소로 이동"),a("br"),t._v("\nex)")]),t._v(" "),a("div",{staticClass:"language-php extra-class"},[a("pre",{pre:!0,attrs:{class:"language-php"}},[a("code",[t._v("@"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("list")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),a("span",{pre:!0,attrs:{class:"token class-name type-declaration"}},[t._v("reset")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$list")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string double-quoted-string"}},[t._v('"First number: "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cureent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$list")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$current_value")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$list")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string double-quoted-string"}},[t._v('"Next number: "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$cureent_value")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string double-quoted-string"}},[t._v('"<br\\n>"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("Java 5.0에서는 for가 foreach와 같다. for (String myElement : myList) { }"),a("br"),t._v("\nC#과 F#에서도 foreach를 사용하는데 유저가 원하는 "),a("code",[t._v("IEnumerator")]),t._v("인터페이스를 가지고 foreach을 원하는대로 사용할 수 있다.")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" names "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" list"),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("names"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),t._v("Add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Bob"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("names"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),t._v("Add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Carol"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("names"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),t._v("Add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Ted"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nforeach "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name in names"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),t._v("WriteLine")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Name: {0}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n")])])]),a("h2",{attrs:{id:"goto"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#goto"}},[t._v("#")]),t._v(" goto")]),t._v(" "),a("p",[t._v("주요 개념은 가독성의 증가이다. Java에서는 허용하지 않고 C#에서는 가끔 사용된다.")]),t._v(" "),a("h2",{attrs:{id:"guarded-commands"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#guarded-commands"}},[t._v("#")]),t._v(" Guarded Commands")]),t._v(" "),a("p",[a("strong",[t._v("Guarded Commands")]),t._v(" (개념을 이해)"),a("br"),t._v("\nDijkstra가 디자인한 검증을 목적으로 한 프로그래밍이다. 일반적으로는 쓰이지 않는 개념이다."),a("br"),t._v("\nGuarded Commands로 쓰여진 코드들은 병렬적으로 실행이 가능하며, 순서가 중요하지 않다.")]),t._v(" "),a("p",[t._v("Selection Guarded Command")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Boolean expr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("statement"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Boolean expr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("statement"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token ellipsis"}},[t._v("...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Boolean expr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("statement"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nfi\n")])])]),a("p",[t._v("모든 조건절을 동시에 확인해서 참인 것들 중에서 랜덤으로 실행이 된다. 하나 이상 참이 있어야한다. 다 거짓이라면 런타임 에러가 일어난다.")]),t._v(" "),a("p",[t._v("Loop Guarded Command")]),t._v(" "),a("div",{staticClass:"language-r extra-class"},[a("pre",{pre:!0,attrs:{class:"language-r"}},[a("code",[t._v("do "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Boolean"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("statement"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Boolean"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("statement"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token ellipsis"}},[t._v("...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Boolean"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("statement"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nod\n")])])]),a("p",[t._v("모든 조건절을 동시에 확인해서 참인 것들 중에서 랜덤으로 반복이 된다. 다 거짓이라면 loop에서 빠져나가게 된다.")])])}),[],!1,null,null,null);s.default=e.exports}}]);