(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{492:function(v,l,i){"use strict";i.r(l);var _=i(25),t=Object(_.a)({},(function(){var v=this,l=v.$createElement,i=v._self._c||l;return i("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[i("h1",{attrs:{id:"c-programming-on-linux"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#c-programming-on-linux"}},[v._v("#")]),v._v(" C Programming on Linux")]),v._v(" "),i("h2",{attrs:{id:"vi"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#vi"}},[v._v("#")]),v._v(" Vi")]),v._v(" "),i("h3",{attrs:{id:"라인-복사-및-삭제"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#라인-복사-및-삭제"}},[v._v("#")]),v._v(" 라인 복사 및 삭제")]),v._v(" "),i("ul",[i("li",[v._v("모든 명령어는 insert mode 에서 esc 키를 눌러 일반 모드로 나온 후, 수행")]),v._v(" "),i("li",[v._v("라인 복사 명령 : yy\n"),i("ul",[i("li",[v._v("앞에 숫자를 입력하면, 현재 커서가 위치한 라인을 포함한\n아래의 다수 라인을 한번에 “레지스터”로 복사함")])])]),v._v(" "),i("li",[v._v("라인 삭제 명령 : dd\n"),i("ul",[i("li",[v._v("앞에 숫자를 입력하면, 현재 커서가 위치한 라인을 포함한\n아래의 다수 라인을 한번에 “레지스터” 로 복사하고, 제거함")])])]),v._v(" "),i("li",[v._v("레지스터의 붙여넣기 : p\n"),i("ul",[i("li",[v._v("현재 커서가 있는 곳에서부터 레지스터의 내용을 삽입함")])])]),v._v(" "),i("li",[v._v("VI Register\n"),i("ul",[i("li",[v._v("VI에서 복사한 내용이 임시로 보관되는 공간.")]),v._v(" "),i("li",[v._v("VI 프로그램 간에 공유됨.\n"),i("ul",[i("li",[v._v("따라서 VI가 종료되어도, 다시 VI를 수행하면 레지스터의 내용을 이용할 수 있음")]),v._v(" "),i("li",[v._v("이 기능은 한 파일의 내용을 복사해서 다른 파일에 붙여넣을 때 유용함")])])])])])]),v._v(" "),i("h3",{attrs:{id:"라인-이동-및-관련-명령"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#라인-이동-및-관련-명령"}},[v._v("#")]),v._v(" 라인 이동 및 관련 명령")]),v._v(" "),i("ul",[i("li",[v._v("라인 이동\n"),i("ul",[i("li",[v._v("사용법 1: “:” 입력 후, 이동할 라인 숫자 입력")]),v._v(" "),i("li",[v._v("사용법 2: 라인 숫자를 입력하고 Shift + g")])])]),v._v(" "),i("li",[v._v("관련 명령\n"),i("ul",[i("li",[v._v("라인의 맨 앞으로 이동하기: 0 (숫자 영)")]),v._v(" "),i("li",[v._v("맨 위로 이동하기: gg")]),v._v(" "),i("li",[v._v("맨 밑으로 이동하기: “😒” or “(입력없이) shift + g”")]),v._v(" "),i("li",[v._v("줄 번호 표시 하기 : “: set number”")])])])]),v._v(" "),i("h3",{attrs:{id:"문자열-찾기-바꾸기"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#문자열-찾기-바꾸기"}},[v._v("#")]),v._v(" 문자열 찾기 / 바꾸기")]),v._v(" "),i("ul",[i("li",[v._v("문자열 찾기\n"),i("ul",[i("li",[v._v("“/”를 입력하고 찾을 문자열 입력")]),v._v(" "),i("li",[v._v("Enter 입력 후, 다음 단어, 이전 단어 검색\n"),i("ul",[i("li",[v._v("소문자 n: 다음 단어")]),v._v(" "),i("li",[v._v("대문자 N: 이전 단어")])])]),v._v(" "),i("li",[v._v("이전에 찾아본 문자열 불러오기\n"),i("ul",[i("li",[v._v("“/”를 입력한 상태에서 위 아래 화살표 사용")])])])])]),v._v(" "),i("li",[v._v("문자열 바꾸기\n"),i("ul",[i("li",[v._v(":[범위]s/찾을문자열/바꿀문자열/[option]")]),v._v(" "),i("li",[v._v("범위: comma 를 이용해 범위 표현. % 는 전체 영역\n"),i("ul",[i("li",[v._v("예) 1,10: 첫 번째부터 10번째 라인 내에서 수행.")])])]),v._v(" "),i("li",[v._v("찾을 문자열에는 정규 표현식 사용 가능 (regular expression 으로 검색)")]),v._v(" "),i("li",[v._v("Options\n"),i("ul",[i("li",[v._v("g: 범위 내에서 바꾸기 수행")]),v._v(" "),i("li",[v._v("c: 한 항목씩 물어보면서 수행")]),v._v(" "),i("li",[v._v("i: 대소문자 무시")])])]),v._v(" "),i("li",[v._v("예) :%s/Protocol/protocol/gc")])])])]),v._v(" "),i("h3",{attrs:{id:"기타"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#기타"}},[v._v("#")]),v._v(" 기타")]),v._v(" "),i("ul",[i("li",[v._v("Undo/Redo (취소하기, 되돌리기)\n"),i("ul",[i("li",[v._v("u: undo")]),v._v(" "),i("li",[v._v("^r: Redo (CTRL + r)")])])]),v._v(" "),i("li",[v._v("세로 및 가로 블록 선택, 편집\n"),i("ul",[i("li",[v._v("^v: Visual block mode (CTRL + v)")]),v._v(" "),i("li",[v._v("모드 진입 후, 화살표로 선택 후, 편집 명령")]),v._v(" "),i("li",[v._v("예) 여러 라인에 있는 주석을 한번에 제거\n"),i("ul",[i("li",[v._v("세로 모드로 여러 주석 문자를 선택 후 delete")])])]),v._v(" "),i("li",[v._v("예) 여러 라인에 주석 한번에 넣기\n"),i("ul",[i("li",[v._v("세로 모드로 영역 선택 후, shift + i 로 입력 모드 진입")]),v._v(" "),i("li",[v._v("텍스트 입력 후, esc 를 두 번 누름")])])])])]),v._v(" "),i("li",[v._v("Read-only 파일의 저장\n"),i("ul",[i("li",[v._v(":w 혹은 :wq 뒤에 ! 를 붙임 (force)")])])]),v._v(" "),i("li",[v._v("외부 텍스트 붙여넣기 모드\n"),i("ul",[i("li",[v._v(":set paste")])])])]),v._v(" "),i("h2",{attrs:{id:"nano"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#nano"}},[v._v("#")]),v._v(" nano")]),v._v(" "),i("ul",[i("li",[v._v("nano - Nano's ANOther editor, inspired by Pico\n"),i("ul",[i("li",[v._v("전통적으로 메일 클라이언트에서 사용하던 Pico 라는 편집기를 기반으로,")]),v._v(" "),i("li",[v._v("Vi와 같이 여러 리눅스 배포판에서 기본 프로그램으로 사용함")]),v._v(" "),i("li",[v._v("Vi와 비교: “사용하기 쉽다.”\n"),i("ul",[i("li",[v._v("대부분 단축키가 아래에 나열되어 있어 모르는 기능도 빠르게 활용할 수 있다.")]),v._v(" "),i("li",[v._v("“검색하여 교체하기” (replace) 기능이 보다 편리하게 사용 가능 하다.")]),v._v(" "),i("li",[v._v("자동 들여쓰기 기능이 더 편리하다.")])])])])]),v._v(" "),i("li",[v._v("Comments\n"),i("ul",[i("li",[v._v("Vi, nano 모두 기본 에디터이므로 간단한 사용 방법은 익혀두는 것이 좋다.")]),v._v(" "),i("li",[v._v("Vi, nano 모두 간단한 편집 기능은 큰 차이 없으므로, 익숙한 도구를 쓰면 된다.")]),v._v(" "),i("li",[v._v("초심자가 처음 배운다면?\n"),i("ul",[i("li",[v._v("Nano: 접근성이 높다")]),v._v(" "),i("li",[v._v("Vi: 처음 배울 때 어려울 수 있지만, 보다 다양하고 강력한 기능들을 제공한다.")])])]),v._v(" "),i("li",[v._v("(!) 결국 다양하고 많은 편집을 필요로 할 때는 윈도우 환경이 훨씬 편리함.\n"),i("ul",[i("li",[v._v("실제 파일은 리눅스에, 편집은 윈도우(or Mac)에서 수행하는 환경을 구축하는 것이 일반적")])])])])])]),v._v(" "),i("h2",{attrs:{id:"gcc-gnu-compiler-collection"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#gcc-gnu-compiler-collection"}},[v._v("#")]),v._v(" GCC: GNU Compiler Collection")]),v._v(" "),i("ul",[i("li",[i("p",[v._v("GNU")]),v._v(" "),i("ul",[i("li",[v._v("유닉스 환경에서 필수적인 다양한 시스템 소프트웨어를 공개 SW 형태로 제작, 배포하는 그룹")]),v._v(" "),i("li",[v._v("1983년 부터 활동하며 다수의 SW를 배포하였고, 대다수 SW가 유닉스 환경에서 de facto standard 로 활용되고 있음\n"),i("ul",[i("li",[v._v("De facto standard: 사실상의 표준. 관습, 관례, 제품이나 체계가 시장이나 일반 대중에게 독점적 지위를 가진 것")])])]),v._v(" "),i("li",[v._v("GNU 패키지 목록\n"),i("ul",[i("li",[v._v("일상적으로 사용하는 다양한 명령어들이 포함되어 있음 (bash, grep, gzip, tar, …)")])])])])]),v._v(" "),i("li",[i("p",[v._v("GCC: GNU Compiler Collection")]),v._v(" "),i("ul",[i("li",[v._v("GNU SW 중 가장 유명한 SW의 하나로, 다양한 Architecture (CPU) 환경에서 다양한 언어를 지원함")]),v._v(" "),i("li",[v._v("C, C++, Objective-C, Fortran, Ada, Go, and D")]),v._v(" "),i("li",[v._v("위 언어를 위한 라이브러리도 포함")]),v._v(" "),i("li",[v._v("상용 컴파일러와 비교해 성능이 낮다는 인식이 있었으나, 최근에는 많은 상용 레벨 SW를 위한 컴파일러로 널리 활용하고 있음\n"),i("ul",[i("li",[v._v("Linux, MySQL, Apache 등등")])])]),v._v(" "),i("li",[v._v("https://gcc.gnu.org/")]),v._v(" "),i("li",[v._v("Git repository: official, github")]),v._v(" "),i("li",[v._v("설치 방법 (j-cloud 인스턴스에서는 수행할 필요 없음)\n"),i("ul",[i("li",[v._v("패키지 업데이트 후, SW 빌드를 위한 필수 패키지 설치. 개발을 위한 manpage 추가")]),v._v(" "),i("li",[v._v("$ sudo apt update && sudo apt install    build-essential")]),v._v(" "),i("li",[v._v("$ sudo apt-get install manpages-dev")])])])])])]),v._v(" "),i("h3",{attrs:{id:"컴파일-환경"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#컴파일-환경"}},[v._v("#")]),v._v(" 컴파일 환경")]),v._v(" "),i("ul",[i("li",[v._v("컴파일이란\n"),i("ul",[i("li",[v._v("텍스트로 작성한 프로그램을 시스템이 이해할 수 있는 기계어로 변환하는 과정")]),v._v(" "),i("li",[v._v("보통 컴파일 과정과 라이브러리 링크 과정을 묶어서 수행하는 것을 의미")])])])]),v._v(" "),i("h3",{attrs:{id:"사용-방법"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#사용-방법"}},[v._v("#")]),v._v(" 사용 방법")]),v._v(" "),i("ul",[i("li",[v._v("$ gcc "),i("source",{attrs:{file:""}}),v._v(" "),i("ul",[i("li",[v._v("Output: 컴파일 성공 시, “a.out” executable file (실행 파일) 생성")])])]),v._v(" "),i("li",[v._v("Options\n"),i("ul",[i("li",[v._v("“-o” : 생성된 실행 파일의 이름을 지정")]),v._v(" "),i("li",[v._v("“-Wall” : 모든 레벨의 warning messages 출력")]),v._v(" "),i("li",[v._v("“-O” : optimization 수행. “-O1”, “-O2”, “-O3” 와 같이 최적화 레벨을 지정할 수 있음\n"),i("ul",[i("li",[v._v("https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html")])])]),v._v(" "),i("li",[v._v("“-l” : (소문자 L) 라이브러리 링크. Math, pthread 와 같이 명시적 링크가 필요한 경우\n"),i("ul",[i("li",[v._v("적절한 library 를 –l 옵션을 이용해 링크해주어야 함\n"),i("ul",[i("li",[v._v("예) math (-lm) , pthread (-lpthread)")])])])])])])])]),v._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[v._v("$ gcc test.c\n$ ls\na.out test.c\n")])])]),i("p",[v._v("기본 실행파일명은 a.out")]),v._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[v._v("$ gcc -o test test.c\n$ ls\ntest test.c\n")])])]),i("p",[v._v("실행파일명 지정은 -o 옵션")]),v._v(" "),i("h2",{attrs:{id:"standard-input-and-output"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#standard-input-and-output"}},[v._v("#")]),v._v(" Standard Input and Output")]),v._v(" "),i("h3",{attrs:{id:"stdout-and-stderr"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#stdout-and-stderr"}},[v._v("#")]),v._v(" stdout and stderr")]),v._v(" "),i("ul",[i("li",[v._v("fprintf()\n"),i("ul",[i("li",[v._v("printf() 와 유사하게 형식이 지정된 문자열 (formatted string)을 출력하되,")]),v._v(" "),i("li",[v._v("맨 앞의 인자로 출력 방향을 지정할 수 있음\n"),i("ul",[i("li",[v._v("printf()는 fprintf()의 simple version. 실제로 fprintf(stdout, …) 으로 구현됨")])])])])])]),v._v(" "),i("h3",{attrs:{id:"stdin"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#stdin"}},[v._v("#")]),v._v(" stdin")]),v._v(" "),i("ul",[i("li",[v._v("Pipe 를 이용한 stdin 입력\n"),i("ul",[i("li",[v._v("Scanf()는 본래 stdin 으로 부터 입력을 받는 함수")]),v._v(" "),i("li",[v._v("Stdin 은 기본으로 console 을 통한 키보드 입력으로 연결되어 있음")]),v._v(" "),i("li",[v._v("Pipe를 이용해 cat 의 수행 결과를 stdin 으로 입력받은 것")])])]),v._v(" "),i("li",[v._v("Stdin, stdout, stderr 의 redirection 을 이용해,\n여러 프로그램 간의 편리한 연동이 가능함")])]),v._v(" "),i("h2",{attrs:{id:"명령행-인자"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#명령행-인자"}},[v._v("#")]),v._v(" 명령행 인자")]),v._v(" "),i("ul",[i("li",[v._v("명령행 : 사용자가 명령을 입력하는 행 (command line)")]),v._v(" "),i("li",[v._v("명령행 인자 : 명령을 입력할 때 함께 지정한 인자(옵션, 옵션인자, 매개변수 등)\n"),i("ul",[i("li",[v._v("명령행 인자는 main 함수로 전달됨.")]),v._v(" "),i("li",[v._v("Main 함수의 첫 번째 인자: 인자의 개수 (보통 int argc 로 선언함. Argument count)")]),v._v(" "),i("li",[v._v("Main 함수의 두 번째 인자: 문자열로 된 인자들이 저장된 포인터 배열\n"),i("ul",[i("li",[v._v("보통 char *argv[] 또는 char **argv 로 선언함. Argument vector")]),v._v(" "),i("li",[v._v("명령어는 항상 첫 번째 인자")])])])])])]),v._v(" "),i("p",[v._v("예) "),i("code",[v._v("int main(int argc, char *argv[])")])]),v._v(" "),i("ul",[i("li",[v._v("포인터 배열?\n"),i("ul",[i("li",[v._v("다양한 길이의 문자열이 임의의 개수만큼 저장되는 경우,")]),v._v(" "),i("li",[v._v("포인터 배열로 다루는 것이 적합함")])])])])])}),[],!1,null,null,null);l.default=t.exports}}]);