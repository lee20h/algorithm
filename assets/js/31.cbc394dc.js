(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{488:function(s,t,a){"use strict";a.r(t);var n=a(25),r=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"sql-활용"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-활용"}},[s._v("#")]),s._v(" SQL 활용")]),s._v(" "),a("h2",{attrs:{id:"조인-join"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#조인-join"}},[s._v("#")]),s._v(" 조인(Join)")]),s._v(" "),a("p",[s._v("EQUI(등가) 조인(교집합)")]),s._v(" "),a("ul",[a("li",[s._v("조인은 여러 개의 릴레이션을 사용해서 새로운 릴레이션을 만드는 과정")]),s._v(" "),a("li",[s._v("가장 기본은 교집합")]),s._v(" "),a("li",[s._v("두 개의 테이블 간에 일치하는 것을 조인")])]),s._v(" "),a("p",[s._v("INNER JOIN")]),s._v(" "),a("ul",[a("li",[s._v("EQUI조인과 같으며, 표준SQL이다.")]),s._v(" "),a("li",[s._v("ON문을 이용해서 조인 조건을 서술한다.")])]),s._v(" "),a("p",[s._v("HASH JOIN")]),s._v(" "),a("ul",[a("li",[s._v("선행 테이블을 결정 후 선행 테이블에서 주어진 조건(WHERE구)에 해당하는 행 선택")]),s._v(" "),a("li",[s._v("행 선택 후 조인 키를 기준으로 해시 함수를 사용해서 해시 테이블을 메인 메모리에 생성하고 후행 테이블에서 주어진 조건에 만족하는 행 찾기")]),s._v(" "),a("li",[s._v("후행 테이블의 조인 키를 사용해서 해시 함수를 적용하여 해당 버킷 검색")])]),s._v(" "),a("p",[s._v("INTERSECT 연산")]),s._v(" "),a("ul",[a("li",[s._v("두 개의 테이블에서 교집합 조회")])]),s._v(" "),a("p",[s._v("NON-EQUI(비등가) 조인"),a("br"),s._v("\n정확하게 일치하지 않는 것을 조인 ("),a("code",[s._v("=")]),s._v("을 제외한 "),a("code",[s._v(">")]),s._v(" "),a("code",[s._v("<")]),s._v(" "),a("code",[s._v("<=")]),s._v(" "),a("code",[s._v(">=")]),s._v(")")]),s._v(" "),a("p",[s._v("OUTER JOIN")]),s._v(" "),a("ul",[a("li",[s._v("두 개의 테이블 간에 교집합을 조회하고 한쪽 테이블에만 있는 데이터도 포함시켜서 조회")]),s._v(" "),a("li",[s._v("왼쪽 테이블에만 있는 행 포함시 "),a("code",[s._v("LEFT OUTER JOIN")])]),s._v(" "),a("li",[s._v("오른쪽 테이블에만 있는 행 포함시 "),a("code",[s._v("RIGHT OUTER JOIN")])]),s._v(" "),a("li",[s._v("두 테이블 전부 포함시 "),a("code",[s._v("FULL OUTER JOIN")])]),s._v(" "),a("li",[s._v("ORACLE 데이터베이스에서는 "),a("code",[s._v("(+)")]),s._v(" 기호 사용")])]),s._v(" "),a("p",[s._v("CROSS JOIN")]),s._v(" "),a("ul",[a("li",[s._v("조인 조건구 없이 2개의 테이블을 하나로 조인")]),s._v(" "),a("li",[s._v("조인구가 없기 때문에 카테시안 곱 발생(A x B)")])]),s._v(" "),a("p",[s._v("UNION을 사용한 합집합 구현"),a("br"),s._v("\nUNION")]),s._v(" "),a("ul",[a("li",[s._v("두 개의 테이블을 하나로 만드는 연산")]),s._v(" "),a("li",[s._v("두 개의 테이블의 칼럼 수, 칼럼의 데이터 형식 모두가 일치 해야한다.")]),s._v(" "),a("li",[s._v("중복 데이터 제거하며, 정렬과정 발생")])]),s._v(" "),a("p",[s._v("UNION ALL")]),s._v(" "),a("ul",[a("li",[s._v("두 개의 테이블을 하나로 합치되, 중복과 정렬 유발X")])]),s._v(" "),a("p",[s._v("차집합을 만드는 MINUS")]),s._v(" "),a("ul",[a("li",[s._v("MINUS 연산은 두 개의 테이블에서 차집합 조회")]),s._v(" "),a("li",[s._v("MS-SQL에서는 EXCEPT")])]),s._v(" "),a("h2",{attrs:{id:"계층형-조회-connect-by"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#계층형-조회-connect-by"}},[s._v("#")]),s._v(" 계층형 조회(CONNECT BY)")]),s._v(" "),a("p",[s._v("ORACLE 데이터베이스에서 지원하며, 계층형으로 데이터 조회")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CREATE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" EMP"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n  EMPNO NUMBER"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PRIMARY")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("KEY")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  ENAME VARCHAR2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  DEPTNO NUMBER"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  MGR NUMBER"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  JOB VARCHAR2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  SAL NUMBER"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INSERT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INTO")]),s._v(" EMP "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VALUES")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'TEST1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'CLERK'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("800")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INSERT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INTO")]),s._v(" EMP "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VALUES")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1001")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'TEST2'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'SALESMAN'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1600")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INSERT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INTO")]),s._v(" EMP "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VALUES")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1002")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'TEST3'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'SALESMAN'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1250")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INSERT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INTO")]),s._v(" EMP "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VALUES")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1003")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'TEST4'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'MANAGER'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2975")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INSERT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INTO")]),s._v(" EMP "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VALUES")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1004")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'TEST5'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'SALESMAN'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1250")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INSERT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INTO")]),s._v(" EMP "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VALUES")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1005")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'TEST6'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1001")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'MANAGER'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2850")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INSERT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INTO")]),s._v(" EMP "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VALUES")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1006")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'TEST7'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1001")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'MANAGER'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2450")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INSERT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INTO")]),s._v(" EMP "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VALUES")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1007")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'TEST8'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1006")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'ANALYST'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INSERT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INTO")]),s._v(" EMP "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VALUES")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1008")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'TEST9'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1006")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'PRESIDENT'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INSERT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INTO")]),s._v(" EMP "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VALUES")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1009")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'TEST10'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1002")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'SALESMAN'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1500")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INSERT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INTO")]),s._v(" EMP "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VALUES")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1010")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'TEST11'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1002")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'CLERK'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INSERT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INTO")]),s._v(" EMP "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VALUES")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1011")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'TEST12'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1001")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'CLERK'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("950")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INSERT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INTO")]),s._v(" EMP "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VALUES")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1012")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'TEST13'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'ANALYST'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INSERT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INTO")]),s._v(" EMP "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VALUES")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1013")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'TEST14'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'CLERK'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1300")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COMMIT")]),s._v("\n")])])]),a("ul",[a("li",[s._v("CONNECT BY는 트리 형태의 구조로 질의 수행")]),s._v(" "),a("li",[s._v("START WITH구는 시작 조건을 의미, CONNECT BY PRIOR는 조인 조건")]),s._v(" "),a("li",[s._v("ROOT로부터 하위 노드의 질의 실행")]),s._v(" "),a("li",[s._v("계층형 조회에서 MAX(LEVEL)사용시 최대 계층 수")])]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("MAX")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LEVEL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" LIMBEST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("EMP\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("START")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WITH")]),s._v(" MGR "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("IS")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CONNECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" PRIOR EMPNO "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" MGR"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("LPAD 함수를 이용해 계층형 조회 결과를 명확히 볼 수 있다.")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LEVEL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" LPAD"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("' '")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LEVEL")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" EMPNO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" MGR"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" CONNECT_BY_ISLEAF\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" EMP\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("START")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WITH")]),s._v(" MGR "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("IS")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CONNECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" PRIOR EMPNO "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" MGR"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("CONNECT BY 키워드")]),s._v(" "),a("ul",[a("li",[s._v("LEVEL : 검색 항목의 깊이")]),s._v(" "),a("li",[s._v("CONNECT_BY_ROOT : 계층구조에서 가장 최상위 값")]),s._v(" "),a("li",[s._v("CONNECT_BY_ISLEAF : 계층구조에서 가장 최하위 값")]),s._v(" "),a("li",[s._v("SYS_CONNECT_BY_PATH : 계층구조의 전체 전개 경로")]),s._v(" "),a("li",[s._v("NOCYCLE : 순환구조가 발생지점까지만 전개")]),s._v(" "),a("li",[s._v("CONNECT_BY_ISCYCLE : 순환구조 발생 지점 표시")])]),s._v(" "),a("h2",{attrs:{id:"서브쿼리"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#서브쿼리"}},[s._v("#")]),s._v(" 서브쿼리")]),s._v(" "),a("ul",[a("li",[s._v("SELECT문에 SELECT문 사용시 스칼라 서브쿼리")]),s._v(" "),a("li",[s._v("FROM문에 SELECT문 사용시 인라인 뷰")]),s._v(" "),a("li",[s._v("WHERE구에 SELECT문 사용시 서브쿼리")])]),s._v(" "),a("p",[s._v("서브쿼리 종류")]),s._v(" "),a("ul",[a("li",[s._v("단일 행 서브쿼리 : 반환하는 행 수 하나 ("),a("code",[s._v("=")]),s._v(" "),a("code",[s._v("<")]),s._v(" "),a("code",[s._v("<=")]),s._v(" "),a("code",[s._v(">")]),s._v(" "),a("code",[s._v(">=")]),s._v(" "),a("code",[s._v("<>")]),s._v(" 사용)")]),s._v(" "),a("li",[s._v("다중행 서브쿼리 : 반환하는 행 수 여러 개 ("),a("code",[s._v("IN")]),s._v(" "),a("code",[s._v("ANY")]),s._v(" "),a("code",[s._v("ALL")]),s._v(" "),a("code",[s._v("EXIST")]),s._v(" 사용)")])]),s._v(" "),a("p",[s._v("다중 행 서브쿼리")]),s._v(" "),a("ul",[a("li",[s._v("IN : MAIN QUERY의 비교조건이 SUBQUERY의 결과 중 하나만 동일하면 된다.(OR조건)")]),s._v(" "),a("li",[s._v("ALL : MAIN QUERY와 SUB QUERY의 결과가 모두 동일하면 참, "),a("code",[s._v("< ALL")]),s._v(" : 최솟값 반환, "),a("code",[s._v("> ALL")]),s._v(" : 최댓값 반환")]),s._v(" "),a("li",[s._v("ANY : MAIN QUERY의 비교조건이 SUB QUERY의 결과 중 하나 이상 동일하면 참, "),a("code",[s._v("< ANY")]),s._v(" : 하나라도 크게 되면 참, "),a("code",[s._v("> ANY")]),s._v(" : 하나라도 작게 되면 참")]),s._v(" "),a("li",[s._v("EXIST : MAIN QUERY와 SUB QUERY의 결과가 하나라도 존재하면 참")])]),s._v(" "),a("p",[s._v("스칼라 서브쿼리"),a("br"),s._v("\n반드시 한 행과 한 컬럼만 반환하는 서브쿼리로, 여러 행 반환 시 오류가 발생한다.")]),s._v(" "),a("p",[s._v("연관 SUBQUERY"),a("br"),s._v("\n연관 서브쿼리는 서브쿼리 내에서 메인 쿼리 내의 칼럼을 사용하는 것을 의미")]),s._v(" "),a("h2",{attrs:{id:"그룹-함수"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#그룹-함수"}},[s._v("#")]),s._v(" 그룹 함수")]),s._v(" "),a("p",[a("strong",[s._v("ROLLUP")])]),s._v(" "),a("ul",[a("li",[s._v("GROUP BY의 컬럼에 대해 "),a("strong",[s._v("SUBTOTAL")]),s._v("을 만듬")]),s._v(" "),a("li",[s._v("GROUP BY구에 칼럼이 두 개 이상 오면 "),a("strong",[s._v("순서에 따라 결과가 달라짐")])])]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" DECODE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("DEPTNO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'전체합계'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" DEPTNO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("SUM")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("SAL"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" EMP\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("GROUP")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" ROLLUP"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("DEPTNO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("DEPTNO에 대해서 GROUP BY로 급여 합계를 계산하고 부서별 전체합계를 추가해서 계산한다."),a("br"),s._v("\nROLLUP은 DEPTNO에 대해서 기존 GROUP BY와는 다르게 부서별 전체합계를 계산한다.")]),s._v(" "),a("p",[a("strong",[s._v("GROUPING 함수")])]),s._v(" "),a("ul",[a("li",[s._v("ROLLUP, CUBE, GROUPING SETS에 생성되는 "),a("strong",[s._v("합계값을 구분")]),s._v("하기 위해 만들어짐")]),s._v(" "),a("li",[s._v("예로 소계, 합계 등이 계산되면 GROUPING 함수는 1을 반환하고 아니면 0을 반환해서 합계값 식별")])]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" DEPTNO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" GROUPING"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("DEPTNO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" JOB"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" GROUPING"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("JOB"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("SUM")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("SAL"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" EMP\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("GROUP")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" ROLLUP"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("DEPTNO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),a("p",[a("strong",[s._v("GROUPING SETS 함수")])]),s._v(" "),a("ul",[a("li",[s._v("GROUP BY에 나오는 칼럼의 순서와 관계없이 "),a("strong",[s._v("다양한 소계")]),s._v(" 만듬")]),s._v(" "),a("li",[s._v("GROUP BY에 나오는 칼럼의 순서와 관계없이 "),a("strong",[s._v("개별적")]),s._v("으로 모두 처리")])]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" DEPTNO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" JOB"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("SUM")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("SAL"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" EMP\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("GROUP")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" GROUPING SETS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("DEPTNO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" JOB"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("GROUPING SETS함수로 DEPTNO와 JOB을 실행한 결과 DEPTNO 합계와 JOB 합계가 개별적으로 조회되었다. 즉, 서로 관계가 없다.")]),s._v(" "),a("p",[a("strong",[s._v("CUBE 함수")])]),s._v(" "),a("ul",[a("li",[s._v("CUBE 함수에 제시한 칼럼 가능한 모든 집계 계산")]),s._v(" "),a("li",[s._v("다차원 집계를 제공하여 다양하게 데이터 분석")]),s._v(" "),a("li",[a("strong",[s._v("조합할 수 있는 경우의 수 모두 조합")]),s._v(" (부서와 직업을 CUBE로 사용하면 부서별 합계, 직업별 합계, 부서별 직업별 합계, 전체합계 조회)")])]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" DEPTNO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" JOB"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("SUM")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("SAL"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" EMP\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("GROUP")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" CUBE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("DEPTNO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" JOB"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("h2",{attrs:{id:"윈도우-함수"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#윈도우-함수"}},[s._v("#")]),s._v(" 윈도우 함수")]),s._v(" "),a("p",[s._v("윈도우 함수는 행과 행 간의 관계를 정의하기 위해서 제공되는 함수로, 순위, 합계, 평균, 행 위치 등을 조작할 수 있다.")]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" WINDOW_FUNCTION"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ARGUMENTS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("OVER")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PARTITION")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" 칼럼\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" WINDOWING절"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" 테이블명"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("p",[a("strong",[s._v("윈도우 함수 구조")])]),s._v(" "),a("ul",[a("li",[s._v("ARGUMENTS(인수) : 윈도우 함수에 따라서 0~N개 설정")]),s._v(" "),a("li",[s._v("PARTITION BY : 전체 집합을 기준에 의해 소그룹으로 나눔")]),s._v(" "),a("li",[s._v("ORDER BY : 어떤 항목에 대해서 정렬")]),s._v(" "),a("li",[s._v("WINDOWING : 행 기준의 범위, ROWS는 물리적 결과의 행 수, RANGE는 논리적인 값에 의한 범위")])]),s._v(" "),a("p",[a("strong",[s._v("WINDOWING")])]),s._v(" "),a("ul",[a("li",[s._v("ROWS : 부분집합인 윈도우 크기를 물리적 단위로 행의 집합을 지정")]),s._v(" "),a("li",[s._v("RANGE : 논리적인 주소에 의해 행 집합을 지정")]),s._v(" "),a("li",[s._v("BETWEEN~AND : 윈도우의 시작과 끝의 위치 지정")]),s._v(" "),a("li",[s._v("UNBOUNDED PRECEDING : 윈도우의 시작 위치가 첫 번째 행")]),s._v(" "),a("li",[s._v("UNBOUNDED FOLLOWING : 윈도우 마지막 위치가 마지막 행")]),s._v(" "),a("li",[s._v("CURRENT ROW : 윈도우 시작 위치가 현재 행")])]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" EMPNO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" ENAME"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" SAL"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("SUM")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("SAL"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("OVER")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" SAL"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ROWS")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("BETWEEN")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("UNBOUNDED")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PRECEDING")]),s._v("\n                  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("UNBOUNDED")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FOLLOWING")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" TOTSAL\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" EMP"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("SAL의 전체합계를 조회하는 쿼리문"),a("br"),s._v("\nBETWEEN 사이의 값으로 현재행, 처음, 마지막 행을 조건을 줄 수 있다.")]),s._v(" "),a("p",[a("strong",[s._v("순위 함수(RANK Function)")])]),s._v(" "),a("ul",[a("li",[s._v("윈도우 함수는 특정 항목과 파티션에 대해서 순위를 계산하는 함수를 제공하나, 순위 함수는 RANK, DENSE_RANK, ROW_NUMBER 함수를 가지고 있다.")])]),s._v(" "),a("p",[s._v("순위 관련 윈도우 함수")]),s._v(" "),a("ul",[a("li",[s._v("RANK : 특정항목 및 파티션에 대해서 순위 계산, 동일한 순위는 동일한 값 부여")]),s._v(" "),a("li",[s._v("DENSE_RANK : 동일한 순위를 하나의 건수로 계산")]),s._v(" "),a("li",[s._v("ROW_NUMBER : 동일한 순위에 대해서 고유의 순위를 부여")])]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" ENAME"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" SAL"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n      RANK"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("OVER")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" SAL "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DESC")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ALL")]),s._v(" RANK"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n      RANK"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("OVER")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PARTITION")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" JOB "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" SAL "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DESC")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" JOB RANK\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" EMP"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("급여 순위를 계산하되, 동일한 순위는 동일하게 조회한다. 직업별로 파티션을 만들고 JOB별 순위를 조회한다.")]),s._v(" "),a("p",[a("strong",[s._v("집계 함수(RANK Function)")])]),s._v(" "),a("ul",[a("li",[s._v("SUM : 파티션별 합계")]),s._v(" "),a("li",[s._v("AVG : 파티션별 평균")]),s._v(" "),a("li",[s._v("COUNT : 파티션별 행 수")]),s._v(" "),a("li",[s._v("MAX, MIN : 파티션 별 최댓값, 최솟값")])]),s._v(" "),a("p",[a("strong",[s._v("행 순서 관련 함수")])]),s._v(" "),a("ul",[a("li",[s._v("FIRST_VALUE : 파티션에 가장 처음에 나오는 값, MIN함수와 같은 결과")]),s._v(" "),a("li",[s._v("LAST_VALUE : 파티션에 가장 나중에 나오는 값, MAX함수와 같은 결과")]),s._v(" "),a("li",[s._v("LAG : 이전 행을 가져옴")]),s._v(" "),a("li",[s._v("LEAD : 윈도우의 특정 위치의 행 가져옴. 기본값은 1")])]),s._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" DEPTNO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" ENAME"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" SAL"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" \n  FIRST_VALUE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ENAME"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("OVER")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PARTITION")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" DEPTNO\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" SAL "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DESC")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ROWS")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("UNBOUNDED")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("PRECEDING")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" DEPT_A "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" EMP"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("p",[a("strong",[s._v("비율 관련 함수")])]),s._v(" "),a("ul",[a("li",[s._v("CUME_DIST : 파티션 전체 건수에서 현재 행보다 작거나 같은 건수에 대한 누적 백분율 조회, 누적 분포상에 위치를 0~1 사이의 값을 가진다.")]),s._v(" "),a("li",[s._v("PERCENT_RANK : 파티션에서 제일 먼저 나온 것을 0으로 제일 늦게 나온 것을 1로 하여 값이 아닌 행의 순서별 백분율 조회")]),s._v(" "),a("li",[s._v("NTILE : 파티션별로 전체 건수를 ARGUMENT 값으로 N등분한 결과 조회")]),s._v(" "),a("li",[s._v("RATIO_TO_REPORT : 파티션 내에 전체 SUM(칼럼)에 대한 행 별 칼럼값의 백분율을 소수점까지 조회")])]),s._v(" "),a("h2",{attrs:{id:"테이블-파티션"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#테이블-파티션"}},[s._v("#")]),s._v(" 테이블 파티션")]),s._v(" "),a("p",[a("strong",[s._v("Partition 기능")])]),s._v(" "),a("ul",[a("li",[s._v("파티션은 대용량의 테이블을 여러 개의 데이터 파일에 분리해서 저장")]),s._v(" "),a("li",[s._v("테이블의 데이터가 물리적으로 분리된 데이터 파일에 저장되면 입력, 수정, 삭제, 조회 성능이 향상")]),s._v(" "),a("li",[s._v("파티션은 각각 파티션 별로 독립적 관리, 파티션 별로 백업하고 복구가 가능하면 파티션 전용 인덱스 생성도 가능")]),s._v(" "),a("li",[s._v("파티션은 Oracle 데이터베이스의 논리적 관리 단위인 테이블 스페이스 간에 이동이 가능")]),s._v(" "),a("li",[s._v("데이터 조회시 데이터의 범위를 줄여서 성능 향상")])]),s._v(" "),a("p",[s._v("Range Partition")]),s._v(" "),a("ul",[a("li",[s._v("테이블의 칼럼 중에서 값의 범위를 기준으로 여러 개의 파티션으로 데이터를 나누어 저장")]),s._v(" "),a("li",[s._v("행을 분리 시 범위를 지정해서 파티션을 나눌 수 있다.")])]),s._v(" "),a("p",[a("strong",[s._v("List Partition")])]),s._v(" "),a("ul",[a("li",[s._v("특정 값을 기준으로 분할하는 방법")])]),s._v(" "),a("p",[a("strong",[s._v("Hash Partition")])]),s._v(" "),a("ul",[a("li",[s._v("데이터베이스 관리 시스템이 내부적으로 해시 함수를 사용해서 데이터 분할")]),s._v(" "),a("li",[s._v("결과적으로 데이터베이스 관리 시스템이 알아서 분할하고 관리")])]),s._v(" "),a("p",[s._v("이외에도 Composite Partition이 있는데 이것은, 여러 개의 파티션 기법을 조합해서 사용하는 것이다.")]),s._v(" "),a("p",[a("strong",[s._v("파티션 인덱스")])]),s._v(" "),a("ul",[a("li",[s._v("Global Index : 여러 개의 파티션에서 하나의 인덱스 사용")]),s._v(" "),a("li",[s._v("Local Index : 해당 파티션 별로 각자의 인덱스 사용")]),s._v(" "),a("li",[s._v("Prefixed Index : 파티션 키와 인덱스 키가 동일")]),s._v(" "),a("li",[s._v("Non Prefixed Index : 파티션 키와 인덱스 키가 다르다.")])]),s._v(" "),a("p",[s._v("Oracle 데이터베이스는 Global Non-Prefixed 지원하지 않는다.")])])}),[],!1,null,null,null);t.default=r.exports}}]);