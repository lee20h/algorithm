(window.webpackJsonp=window.webpackJsonp||[]).push([[101],{451:function(v,i,_){"use strict";_.r(i);var t=_(25),l=Object(t.a)({},(function(){var v=this,i=v.$createElement,_=v._self._c||i;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"오픈소스-소프트웨어-참여"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#오픈소스-소프트웨어-참여"}},[v._v("#")]),v._v(" 오픈소스 소프트웨어 참여")]),v._v(" "),_("p",[v._v("ALM (Application Lifecycle Management)")]),v._v(" "),_("h2",{attrs:{id:"typical-alm-workflow"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#typical-alm-workflow"}},[v._v("#")]),v._v(" Typical ALM Workflow")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("개발자는 Redmine에 작성되어 있는 요구사항, 업무, 이슈들을 작업 리스트에 확인")])]),v._v(" "),_("li",[_("p",[v._v("개발자는 자신의 업무와 관련 있는 소스 코드를 Git + Gerrit으로부터 Fetch 받음")])]),v._v(" "),_("li",[_("p",[v._v("개발자가 코딩과 Local Test를 마친 자신의 소스 코드를 리뷰 요청을 위해 Gerrit에 Push 함")])]),v._v(" "),_("li",[_("p",[v._v("Jenkins는 빌드, 정적분석, 단위 테스트를 위해 Gerrit에 Push된 소스 코드를 Fetch함")])]),v._v(" "),_("li",[_("p",[v._v("Jenkins는 확인 결과를 Gerrit에 등록")])]),v._v(" "),_("li",[_("p",[v._v("리뷰어들은 개발자가 개발한 소스 코드의 리뷰를 수행")])]),v._v(" "),_("li",[_("p",[v._v("리뷰어들은 검증결과를 Gerrit에 등록")])]),v._v(" "),_("li",[_("p",[v._v("Gerrit은 코드 리뷰 결과와 빌드 검증 결과를 바탕으로 소스를 Git에 commit")])])]),v._v(" "),_("h2",{attrs:{id:"oss-용어"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#oss-용어"}},[v._v("#")]),v._v(" OSS 용어")]),v._v(" "),_("p",[v._v("Issue tracking")]),v._v(" "),_("ul",[_("li",[v._v("프로젝트의 이슈를 생성, 해결하기까지의 과정을 추적하고 공유하는 시스템")]),v._v(" "),_("li",[v._v("기능의 수정, 개선, 추가 기능 등 프로젝트에 대한 논의가 이슈로 진행됨")]),v._v(" "),_("li",[v._v("Issue ticketing 이라고도 하며, 이슈를 발행(ticket)한다고 표현함")]),v._v(" "),_("li",[v._v("예) Jira, Redmine, GitHub")])]),v._v(" "),_("p",[v._v("Bug tracking")]),v._v(" "),_("ul",[_("li",[v._v("버그의 보고, 수정 작업, 완료 보고 등 버그의 생성과 최종 해결까지의 과정을 추적하고 공유하는 시스템")]),v._v(" "),_("li",[v._v("Issue tracking 에 통합되는 경우도 많음")]),v._v(" "),_("li",[v._v("예) Bugzilla, Redmine, Trac, Mantis")])]),v._v(" "),_("p",[v._v("Repository")]),v._v(" "),_("ul",[_("li",[v._v("프로젝트의 소스 코드 보관소")]),v._v(" "),_("li",[v._v("여러 사람이 동시에 작업하므로 소스 관리 (source control) 기능이 필수적. Version, branch control 이 주된 관리 기능.")])]),v._v(" "),_("p",[v._v("Code review")]),v._v(" "),_("ul",[_("li",[v._v("여러 개발자가 함께 코드를 상호 검토하여 코드의 질을 향상시키는 작업")]),v._v(" "),_("li",[v._v("Gerrit과 같은 코드 리뷰 지원 도구가 유명함")])]),v._v(" "),_("p",[v._v("Quality Assurance")]),v._v(" "),_("ul",[_("li",[v._v("코드 품질 관리. 일반적으로 정형화된 정적 테스트를 자동으로 수행하여 코드의 문법, 스타일, 보안 등의 오류를 탐지함")]),v._v(" "),_("li",[v._v("예) SonarQube, PMD, FindBugs, CheckStyle, SCALE")])]),v._v(" "),_("p",[v._v("CI/CD")]),v._v(" "),_("ul",[_("li",[v._v("CI: continuous integration (지속적 통합)\n"),_("ul",[_("li",[v._v("소스 코드의 빌드, 품질 관리를 위한 테스트를 자동으로 수행하여, QA (Quality Assurance)가 완료된 통합본을 생성하는 프로세스")])])]),v._v(" "),_("li",[v._v("CD: continuous delivery (지속적 배포)\n"),_("ul",[_("li",[v._v("CI 를 통과한 새로운 통합본을 자동으로 서비스 환경에 즉시 배포하는 것")])])]),v._v(" "),_("li",[v._v("Jenkins 가 가장 유명")])]),v._v(" "),_("p",[v._v("Contributor")]),v._v(" "),_("ul",[_("li",[v._v("OSS 프로젝트에 기여 (contribution)한 사람")]),v._v(" "),_("li",[v._v("기능 추가, 문서 작성 등 모든 형태의 기여가 가능")])]),v._v(" "),_("p",[v._v("Committer")]),v._v(" "),_("ul",[_("li",[v._v("OSS 프로젝트의 코드 관리자")]),v._v(" "),_("li",[v._v("코드를 직접 수정하거나, contributor의 수정 요청 (PR)을 수락 or 거절")])]),v._v(" "),_("p",[v._v("Fork")]),v._v(" "),_("ul",[_("li",[v._v("저장소를 복제하는 것. 기존 저장소에 영향을 주지 않고, 추가 수정 작업을\n하기 위해 사용하는 동작.")])]),v._v(" "),_("p",[v._v("Pull Request (PR)")]),v._v(" "),_("ul",[_("li",[v._v("Fork 해서 수행한 변경 내용을 다시 기존 저장소에 적용하고자 요청하는 것")])])])}),[],!1,null,null,null);i.default=l.exports}}]);