(window.webpackJsonp=window.webpackJsonp||[]).push([[116],{380:function(v,_,l){"use strict";l.r(_);var t=l(25),i=Object(t.a)({},(function(){var v=this,_=v.$createElement,l=v._self._c||_;return l("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[l("h1",{attrs:{id:"데이터베이스-설계"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#데이터베이스-설계"}},[v._v("#")]),v._v(" 데이터베이스 설계")]),v._v(" "),l("h3",{attrs:{id:"데이터-디자인"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#데이터-디자인"}},[v._v("#")]),v._v(" 데이터 디자인")]),v._v(" "),l("ul",[l("li",[v._v("정보 모델링은 시스템의 정적인 정보 구조를 나타내는데 사용")]),v._v(" "),l("li",[v._v("정보 모델링은 엔티티들을 정의하고 이들 사이의 연관성을 규명하는 작업")]),v._v(" "),l("li",[v._v("이 모델은 객체를 중심으로 객체의 특성을 정의한다.")]),v._v(" "),l("li",[v._v("정보 모델은 데이터를 개념적 차원에서 기술하며, 물리적인 면은 고려하지 않는다.")]),v._v(" "),l("li",[v._v("사용자의 관점을 나타내는 개념적인 단계에서는 시스템의 데이터가 어떻게 저장되고 유지되는지에 관한 세부사항을 나타낼 필요가 없다.")])]),v._v(" "),l("h3",{attrs:{id:"데이터-추상화-3단계"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#데이터-추상화-3단계"}},[v._v("#")]),v._v(" 데이터 추상화 3단계")]),v._v(" "),l("table",[l("thead",[l("tr",[l("th",[v._v("데이터 추상화 3단계")]),v._v(" "),l("th",[v._v("데이터")])])]),v._v(" "),l("tbody",[l("tr",[l("td",[v._v("관점 단계")]),v._v(" "),l("td",[v._v("뷰")])]),v._v(" "),l("tr",[l("td",[v._v("개념 단계")]),v._v(" "),l("td",[v._v("개념적 스키마")])]),v._v(" "),l("tr",[l("td",[v._v("물리 단계")]),v._v(" "),l("td",[v._v("물리적 스키마")])])])]),v._v(" "),l("ul",[l("li",[v._v("뷰 단계는 데이터베이스 사용자들의 서로 다른 요구사항과 관점을 나타내는 단계이다.")]),v._v(" "),l("li",[v._v("각 사용자는 자신의 직무 및 역할과 관련된 일부분에만 관심을 가지고 이싿.")]),v._v(" "),l("li",[v._v("뷰 단계에서 규명된 다양한 사용자의 고나점과 데이터가 모여 통합되는 과정이 두 번재 단계인 개념 단계")]),v._v(" "),l("li",[v._v("이 단계에서 다양한 사용자로부터 요구사항이 통합되며, 이를 "),l("strong",[v._v("뷰 통합")]),v._v("이라 부른다.")]),v._v(" "),l("li",[v._v("뷰 통합이 이뤄진 후 EER 모델로부터 데이터의 저장을 위한 물리적인 구조를 설계해야 한다. 이 단계를 물리적 단계라 부르며, "),l("strong",[v._v("소프트웨어 개발 라이프사이클의 설계 단")]),v._v("계에 해당한다.")])]),v._v(" "),l("h2",{attrs:{id:"관계형-모델"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#관계형-모델"}},[v._v("#")]),v._v(" 관계형 모델")]),v._v(" "),l("ul",[l("li",[v._v("관계형 모델은 Codd에 의해 1970에 처음 소개되었으며, 간단하며 단순한 구조를 가지고 있으 많은 사람들이 이용")]),v._v(" "),l("li",[v._v("관계형 모델은 테이블을 이용하여 나타낸다. 각 테이블은 릴레이션이라 불리워지며, 테이블의 각 행은 튜플이라 불리워진다.")]),v._v(" "),l("li",[v._v("각 튜플은 연관된 데이터 값들의 모임으로 실세계의 엔티티나 관계를 나타낸다.")]),v._v(" "),l("li",[v._v("관계형 모델은 수학에서의 집합 이론에 근거하고 있다. 각 테이블은 집합이며, 테이블의 각 튜플은 집합의 원소에 해당한다.")]),v._v(" "),l("li",[v._v("각 테이블은 여러 속성들의 모임으로 정의되며, 테이블 열 머리 부분에 표시된다.")])]),v._v(" "),l("h3",{attrs:{id:"관계형-모델-제약-조건"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#관계형-모델-제약-조건"}},[v._v("#")]),v._v(" 관계형 모델 제약 조건")]),v._v(" "),l("ul",[l("li",[v._v("데이터 제약 조건: 도메인 제약 조건, 키 제약조건, 매핑 제약조건, 참여 제약조건, 참조 무결성 제약조건 등")]),v._v(" "),l("li",[v._v("이러한 제약조건을 일반적으로 무결성 제약조건이라 부르며, 무결성 제약 조건의 목적은 데이터베이스에 잘못된 데이터가 들어가지 않도록 제약을 가하는 것")]),v._v(" "),l("li",[v._v("실제로 바람직한 데이터베이스는 데이터에 대하여 실세계에서 요ㅕ구하는 제약조건을 정확히 반영할 때 가능")])]),v._v(" "),l("h2",{attrs:{id:"매핑"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#매핑"}},[v._v("#")]),v._v(" 매핑")]),v._v(" "),l("ul",[l("li",[v._v("1단계\n"),l("ul",[l("li",[v._v("EER 모델의 각 엔티티 타입에 대해 하나의 테이블을 만들고, 엔티티 타입의 속성들을 테이블의 속성으로 포함")]),v._v(" "),l("li",[v._v("엔티티 타입의 주키는 테이블의 주키가 된다. 필요하면 시스템 생성키 사용")])])]),v._v(" "),l("li",[v._v("2단계\n"),l("ul",[l("li",[v._v("두 엔티티 타입이 이차 관계 타입으로 일 대 일 대응 관곌르 가지고 있는 경우, 이 관계 타입은 두 엔티티 타입 중 하나에 포함될 수 있다.")]),v._v(" "),l("li",[v._v("만약 참여 제약조건이 필수인 엔티티 타입이 있으면 필수인 엔티티 타입에 포함시키는 것이 일반적이다.")]),v._v(" "),l("li",[v._v("만약 두 엔티티 타입이 모두 필수적으로 차명하고 있는 경우 두 엔티티 타입과 관계 타입을 하나의 테이블로 묶어 나타낼 수도 있다.")]),v._v(" "),l("li",[v._v("두 엔티티 타입이 다른 관계 타입에 참여하지 않을 때 이렇게 합치는 것이 가능하다.")]),v._v(" "),l("li",[v._v("엔티티 타입이 선택적으로 일 대 일 매핑을 하는 경우 두 엔티티를 합치는 것은 일반적으로 바람직하지 않다.")])])]),v._v(" "),l("li",[v._v("3단계\n"),l("ul",[l("li",[v._v("두 엔티티 사이의 관계가 일 대 다 매핑의 경우에도 일(1-side)로 참여하는 엔티티 타입의 테이블에 관계 타입을 묶어 표현")]),v._v(" "),l("li",[v._v("다수(N-side)로 참여하는 엔티티 타입의 주키를 외래키로 포함시킬 수 있다.")])])]),v._v(" "),l("li",[v._v("4단계\n"),l("ul",[l("li",[v._v("두 엔티티 타입 사이에 이차 다 대 다 관계가 있는 경우, 관계 타입을 위해 독립적인 테이블 S를 만든다.")]),v._v(" "),l("li",[l("strong",[v._v("참여 엔티티 타입의 주키들은 S에 외래키")]),v._v("로 포함시킨다.")]),v._v(" "),l("li",[v._v("일반적으로 "),l("em",[v._v("참여 엔티티 타입의 주키들이 합친 것이 S의 주키")]),v._v("가 된다.")]),v._v(" "),l("li",[v._v("만약 "),l("strong",[v._v("관계 타입에 속한 속성이 있는 경우")]),v._v(" S의 속성이 된다.")])])]),v._v(" "),l("li",[v._v("5단계\n"),l("ul",[l("li",[v._v("만약 관계 타입의 차수가 3차 이상인 경우 새로운 테이블 S를 만든다.")]),v._v(" "),l("li",[v._v("참여 엔티티 타입의 주키들은 S에 외래키로 포함시킨다.")]),v._v(" "),l("li",[v._v("일반적으로 참여 엔티티 타입의 주키들이 합쳐져 S의 주키가 된다.")]),v._v(" "),l("li",[v._v("또한 관계 타입에 속한 속성들이 있으면 S에 속성으로 포함시킨다.")])])]),v._v(" "),l("li",[v._v("6단계\n"),l("ul",[l("li",[v._v("계층적 구조 (선택1)\n"),l("ul",[l("li",[v._v("상위 클래스에 해당하는 테이블을 만들고 상위 클래스에 주키를 포함한 모든 속성을 포함시킨다.")]),v._v(" "),l("li",[v._v("하위 클래스마다 테이블을 만들고 주키를 포함한 하위 클래스의 모든 속성을 포함시킨다. 이 때 상위 클래스의 주키와 하위 클래스의 주키는 같다.")])])]),v._v(" "),l("li",[v._v("계층적 구조 (선택2)\n"),l("ul",[l("li",[v._v("각 하위 클래스에 대해 테이블을 만들고, 각 테이블에 상위 클래스의 모든 속성을 포함시킨다.")]),v._v(" "),l("li",[v._v("즉 상위 클래스의 모든 속성은 하위 클래스에 상속되어 나타나며, 상위 클래스를 위한 테이블은 따로 존재하지 않는다.")]),v._v(" "),l("li",[v._v("이러한 선택은 해체, 전체 특수화의 경우에만 가능하다.")])])]),v._v(" "),l("li",[v._v("계층적 구조 (선택3)\n"),l("ul",[l("li",[v._v("하위 클래스를 모두 합하여 하나의 테이블로 나타낸다.")]),v._v(" "),l("li",[v._v("상위 클래스의 속성들도 이 테이블에 포함시킨다.")]),v._v(" "),l("li",[v._v("하위 클래스들 사이에 해체 조건이 있는 경우, 새로운 속성 t를 추가하여 각 튜플이 어느 하위 클래스에 속한 것인지 구별한다.")]),v._v(" "),l("li",[v._v("이러한 접근 방법을 취하는 경우 많은 속성들이 null 값을 가질 수 있다는 단점을 가지고 있다.")])])]),v._v(" "),l("li",[v._v("계층적 구조 (선택4)\n"),l("ul",[l("li",[v._v("3번째 선택과 마찬가지로 하위 클래스를 모두 합하여 하나의 테이블로 나타낸다.")]),v._v(" "),l("li",[v._v("하위 클래스들 사이에 중복조건이 있어 상위 클래스에 있는 한 엔티티가 여러 하위 클래스에 존재할 수 있는 경우, 새로운 속성들 "),l("code",[v._v("t1, t2, t3, ... tm")]),v._v("을 추가하여 각 튜플이 어느 하위 클래스에 속한 것인지를 구별한다.")]),v._v(" "),l("li",[v._v("중복 특수화의 경우 이러한 선택이 가능하며, 서브 클래스의 수만큼 논리값을 가지는 타입의 수를 만든다.")])])])])])]),v._v(" "),l("h2",{attrs:{id:"중복성-관리와-정규화"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#중복성-관리와-정규화"}},[v._v("#")]),v._v(" 중복성 관리와 정규화")]),v._v(" "),l("ul",[l("li",[v._v("데이터의 중복성은 많은 문제를 야기시킨다.")]),v._v(" "),l("li",[v._v("데이터의 불필요한 중복성을 줄이고 정보의 검색이 용이하도록 테이블들을 정의하는 일이 중요")]),v._v(" "),l("li",[v._v("논리적인 관점에서 보면 데이터는 오직 한 번만 저장되어야 한다.")]),v._v(" "),l("li",[v._v("데이터의 중복성 문제는 물리적인 구현 단계에서 발생한다.")]),v._v(" "),l("li",[v._v("제어된 중복성: 중복되는 데이터를 제어할 수 있도록 한다.")]),v._v(" "),l("li",[v._v("이상: 제어되지 않는 데이터의 중복의 결과로 초래하는 특성\n"),l("ul",[l("li",[v._v("삭제 이상")]),v._v(" "),l("li",[v._v("삽입 이상")]),v._v(" "),l("li",[v._v("갱신 이상")])])])]),v._v(" "),l("h3",{attrs:{id:"제1-정규형"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#제1-정규형"}},[v._v("#")]),v._v(" 제1 정규형")]),v._v(" "),l("ul",[l("li",[v._v("테이블의 각 속성들이 쪼개질 수 없는 값을 가지며, 각 튜플의 속성이 이의 도메인으로부터 오직 하나의 값만을 가질 때, 이 테이블은 1NF라 한다.")]),v._v(" "),l("li",[v._v("1NF이 아닌 경우 관계형 데이터베이스에서 제공하는 기본 오퍼레이션을 사용할 수 없으며, 관계형 데이터베이스의 중요한 개념인 함수적 종속성, 키 등에 관한 이론이 적용되지 못한다.")])]),v._v(" "),l("h3",{attrs:{id:"제2-정규형"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#제2-정규형"}},[v._v("#")]),v._v(" 제2 정규형")]),v._v(" "),l("ul",[l("li",[v._v("테이블이 1NF이고, 키가 아닌 각 속성이 모든 키에 대하여 "),l("strong",[v._v("완전 함수 종속")]),v._v("될 때 이 테이블은 2NF이라 한다.")])]),v._v(" "),l("h3",{attrs:{id:"제3-정규형"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#제3-정규형"}},[v._v("#")]),v._v(" 제3 정규형")]),v._v(" "),l("ul",[l("li",[v._v("테이블이 2NF이고, 키가 아닌 속성들이 어떤 키에도 이행적으로 종속되지 않을 때 이 테이블은 3NF이라 한다.")])]),v._v(" "),l("h2",{attrs:{id:"뷰"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#뷰"}},[v._v("#")]),v._v(" 뷰")]),v._v(" "),l("ul",[l("li",[v._v("관계형 DBMS에 실제 존재하는 테이블이 있다.")]),v._v(" "),l("li",[v._v("한편 사용자에게 보여지거나 연산을 위해 만들어진 "),l("strong",[v._v("가상적인 테이블")]),v._v("이 존재하며, 뷰라한다.")]),v._v(" "),l("li",[v._v("뷰는 실제 존재하는 테이블로부터 연산을 수행하여 그 결과를 보여주는 것이며, 사용자는 뷰를 통하여 실제 데이터베이스에 접근하게 된다.")]),v._v(" "),l("li",[v._v("뷰는 그 자체가 권한을 관리하는 메커니즘이라 할 수 있다.")]),v._v(" "),l("li",[v._v("뷰를 통해 실제 테이블의 일부 속성만을 검색하는 권한을 부여할 수 있다.")]),v._v(" "),l("li",[v._v("데이터 추상화 3단계를 보면 사용자의 요구사항을 나타내기 위해 뷰를 정의하고, 이를 개념적 스키마와 매핑하는 과정이 필요함을 알 수 있다.")]),v._v(" "),l("li",[v._v("또한 뷰는 실제로 존재하지는 않지만 자주 참조할 필요가 있는 테이블을 명시하는데 사용한다.")])]),v._v(" "),l("h3",{attrs:{id:"뷰-갱신"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#뷰-갱신"}},[v._v("#")]),v._v(" 뷰 갱신")]),v._v(" "),l("ul",[l("li",[v._v("대부분의 경우 뷰를 통해 데이터를 검색하게 되며, 뷰에 대한 검색 질의는 아무런 제약을 받지 않는다.")]),v._v(" "),l("li",[v._v("그러나 뷰를 통해 데이터를 갱신하는 것, 즉 뷰갱신은 복잡하고 애매모호하여 문제를 일으킬 수 이싿.")]),v._v(" "),l("li",[v._v("한 물리적 테이블에서 만들어진 뷰를 통해 데이터를 갱신하는 경우에는 큰 문제가 없을 수 있으나, 여러 테이블을 조인하여 뷸르 만든 경우 여러가지 해석이 가능한 경우들이 있다.")]),v._v(" "),l("li",[v._v("뷰 갱신을 제대로 수행하기 위해 특정 원칙들이 사전에 수립되어야 한다.")]),v._v(" "),l("li",[v._v("일반적으로 뷰를 통한 갱신은 물리적인 데이터베이스에 관한 충분한 지식을 가지고 있는 제한된 사용자에게만 허용하는 것이 바람직하다.")])]),v._v(" "),l("h2",{attrs:{id:"시스템의-데이터-처리"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#시스템의-데이터-처리"}},[v._v("#")]),v._v(" 시스템의 데이터 처리")]),v._v(" "),l("ul",[l("li",[v._v("일반적으로 데이터의 저장은 파일, 데이터베이스, 자료 구조에 의해 구현된다. 어느 것을 사용할 것인가의 문제는 여러 요소에 의해 결정될 수 이싿.")]),v._v(" "),l("li",[v._v("데이터의 양이 너무 많고 구조화하기 어려운 경우이거나 많은 양의 데이터임에도 불구하고 빈번한 검색이 요구되는 경우, 원시 데이터 또는 오래 저장될 필요가 없는 휘발성이 강한 데이터를 가지고 있는 경우에는 파일에 저장하는 것이 타당하다.")]),v._v(" "),l("li",[v._v("파일을 사용하는 것이 자료를 저장하는 가장 값싼 방법이다. 파일을 사용하여 자료들을 영구히 저장할 수 있다. 그러나 파일을 사용하는 경우 각 자료를 관리하는 프로그램을 만들어야 하며, 많은 경우 응용 프로그램과 파일 관리 기능이 분리되기 어려워 이식성에 문제가 생길 수 있다.")]),v._v(" "),l("li",[v._v("한편 데이터가 DBMS에 저장되어야 하는 경우는 많은 사용자가 동시에 데이터를 사용하거나, 보다 나은 자료 관리가 요구되는 경우이다. 서로 다른 하드웨어와 소프트웨어에 데이터를 이식시켜야 하는 경우에도 DBMS를 사용하는 것이 좋다.")]),v._v(" "),l("li",[v._v("DBMS는 표준화된 인터페이스를 응용 시스템에 제공할 수 있으며, 자료에 대한 보안, 일치성, 병행 처리 등과 같은 기능을 제공한다. 시스템 개발자는 데이터를 처리하는 많은 기능을 프로그램할 필요없이 시스템 개발을 할 수 있다.")])]),v._v(" "),l("h2",{attrs:{id:"요약"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#요약"}},[v._v("#")]),v._v(" 요약")]),v._v(" "),l("ul",[l("li",[v._v("이 장에서는 요구사항 분석 단계에서 나타난 정보 모델링의 결과를 관계형 데이터베이스로 설계하는 과정에 대하여 살펴보았다.")]),v._v(" "),l("li",[v._v("관계형 데이터베이스로 설계는 정보 모델링의 결과인 엔티티, 엔티티의 속성, 엔티티 사이의 연관성을 관계형 데이터베이스의 기본 구조인 테이블로 매핑하여 이뤄진다.")]),v._v(" "),l("li",[v._v("EER 모델에서 관계형 모델로의 매핑은 쉽게 자동적으로 이뤄지는 부분이 많으며, 전환을 위해 필요한 가이드라인과 단계가 제시되어 있다.")]),v._v(" "),l("li",[v._v("관계형 모델에 있는 데이터가 고도의 정확도와 일관성을 유지하기 위해 만족해야 할 제약 조건들이 있다. 이러한 제약조건으로는 도메인 제약조건, 키 제약조건, 매핑 제약조건, 참여 제약조건, 참조 무결성 제약조건 등이 있다.")]),v._v(" "),l("li",[v._v("관계형 데이터베이스를 설계할 때 중점적으로 고려되어야할 사항은 불필요한 데이터의 중복성을 줄이고 정보의 검색이 용이하도록 테이블들을 정의하는 일이다. 동일한 정보를 여러 번 저장하는 중복성은 여러 문제를 야기시킨다. 논리적으로는 한 번이지만 물리적으로는 데이터가 중복된 횟수만큼 반복하여 변경해야 한다.")])])])}),[],!1,null,null,null);_.default=i.exports}}]);