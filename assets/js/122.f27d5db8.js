(window.webpackJsonp=window.webpackJsonp||[]).push([[122],{367:function(v,_,t){"use strict";t.r(_);var a=t(25),r=Object(a.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"소프트웨어-개발의-일반적-공정-과정"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#소프트웨어-개발의-일반적-공정-과정"}},[v._v("#")]),v._v(" 소프트웨어 개발의 일반적 공정 과정")]),v._v(" "),t("h2",{attrs:{id:"소프트웨어-개발-과정"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#소프트웨어-개발-과정"}},[v._v("#")]),v._v(" 소프트웨어 개발 과정")]),v._v(" "),t("p",[t("code",[v._v("계획 -> 요구사항 분석 -> 설계 -> 구현 -> 시험 및 유지 보수")]),v._v(" 과정(생명주기)을 거쳐야한다. 이때 각 과정에서는 검증이 이뤄져야하고 전체적인 소프트웨어 위험 분석이 시행되어야한다.")]),v._v(" "),t("p",[v._v("소프트웨어는 여러 구성요소가 유기적으로 상호작용하는 시스템으로, 일반적으로는 HW 및 다른 요소들과 결합한다.")]),v._v(" "),t("p",[v._v("시스템 전체에 대한 기능과 니즈의 정의가 선결된 후 그 기능의 일부를 소프트웨어 시스템이 담당한다.")]),v._v(" "),t("p",[v._v("만약 시스템을 구매할 고객이 이미 정해져있는 경우 고객이 비용을 담당하는 주문생산 제품을 개발하게 된다. 이때는 고객과의 계약으로 개발이 시작되고, 유저가 고객으로 한정되어 있다.")]),v._v(" "),t("p",[v._v("고객이 주문하면 개발하는 것보다 이미 상업화된 제품을 구입하는 경향이 늘고 있다. 해당 제품이 주문생산 제품보다 시간과 비용을 줄일 수 있어서 선호된다. 만약 상업화된 제품이 고객의 니즈를 충족시키지 못한 경우 수정사항을 요구하는 쪽으로 넘어가게 된다.")]),v._v(" "),t("p",[v._v("소프트웨어 품질을 보증하기위해서는 소프트웨어의 공정 과정을 분석, 설계, 구현할 때 유지보수 과정에 적용될 수 있는 기법과 도구들이 확립되어야한다. 또한 각 공정과정의 임무, 입력물, 산출물, 사용도구가 각각 잘 정리되어야한다.")]),v._v(" "),t("h2",{attrs:{id:"프로젝트-계획"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#프로젝트-계획"}},[v._v("#")]),v._v(" 프로젝트 계획")]),v._v(" "),t("p",[v._v("프로젝트 계획은 소프트웨어 프로젝트의 핵심 활동이며 소프트웨어 프로젝트 관리에서 가장 중요하게 여겨지는 과정이다.")]),v._v(" "),t("p",[v._v("계획은 본질적으로 미래의 변화를 준비하는 과정으로, 목표를 세우고 이를 달성하기 위해 체계적인 진행 상황 관리를 할 수 있도록 세부 행동 방안을 마련하는 것이며 프로젝트 실행과 통제의 지침이 된다. 이 단계에서 결과물은 계획서 문서들이 될 수 있다.")]),v._v(" "),t("h2",{attrs:{id:"요구사항-분석"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#요구사항-분석"}},[v._v("#")]),v._v(" 요구사항 분석")]),v._v(" "),t("p",[v._v("소프트웨어 개발 생명주기에서 계획단계 다음으로 이루어지며, 고객의 요구를 만족시키는 소프트웨어를 개발하기 위해 고객의 요구사항을 알아내는 것은 시스템을 개발하는 관리자와 실무자에게 중요한 단계다.")]),v._v(" "),t("p",[v._v("요구사항 오류를 줄이기 위해서 프로젝트 초기인 요구사항 분석단계에서부터 다양한 이해관계자를 프로그램에 참여시키는 것은 중요하다. 이해관계자의 활발한 참여는 잘못된 요구사항을 찾고 중요 요구사항을 누락시키지 않도록 할때 도움이 된다.")]),v._v(" "),t("p",[v._v("요구사항은 프로젝트 범위 관리에 기초 자료를 제공한다. 프로젝트가 수행되는 모든 과정에 영향을 미칠 수 있다. 따라서 요구사항을 규명, 명세화, 효율적으로 관리하는 문제는 소프트웨어 개발자에게 중요한 부분이다.")]),v._v(" "),t("p",[v._v("소프트웨어 프로젝트 실패 원인이 요구사항 분석이 잘못된 경우가 많다. 따라서 여러가지를 자문하여 답을 고려하여 분석해야한다.")]),v._v(" "),t("h3",{attrs:{id:"요구사항의-규명"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#요구사항의-규명"}},[v._v("#")]),v._v(" 요구사항의 규명")]),v._v(" "),t("p",[v._v("사용자의 관점에서 시스템의 요구사항을 모으는 것이 요구사항의 규명이라고 할 수 있다. 기능, 성능, 인터페이스에 대한 요구사항들이 있고 이러한 요구사항 분석은 업무 분석으로 불린다.")]),v._v(" "),t("p",[v._v("요구사항 분석은 고객의 니즈가 나오게 된 원인, 배경, 환경 등에 대한 분석을 포함한다. 또한, 시스템에 대한 필요가 나오게 된 고객의 내부 환경과 외적 요인을 파악해야한다.")]),v._v(" "),t("p",[v._v("내적 요인 : 인력 규모 축소, 기술력 향상, 생산 증대, 서비스 향상"),t("br"),v._v("\n외적 요인 : 경쟁, 법규나 제도의 변화, 시장 여건의 변화")]),v._v(" "),t("p",[v._v("요구사항 분석 단계의 "),t("strong",[v._v("주요 초점")]),v._v("은 어떻게(how to)가 아니라 무엇\n(what)이다.")]),v._v(" "),t("h3",{attrs:{id:"타당성-조사"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#타당성-조사"}},[v._v("#")]),v._v(" 타당성 조사")]),v._v(" "),t("p",[v._v("주어진 시간과 예산안에서 시스템을 개발 해야하고, 가능한 빠른 시간 내에 타당성을 평가하는 것이 요구된다. 따라서 타당성 조사는 프로젝트 계획 단계에서 이뤄지는 것이 바람직하며 분석단계에서도 이뤄지는 것이 일반적이다. 그리고 타당성 조사는 경제적 타당성, 기술적 타당성, 법적 타당성, 대체 방안 등에 집중되어 이뤄져있다.")]),v._v(" "),t("p",[v._v("시스템에 개발 요구되는 시간, 비용, 인력 등의 자원은 시스템의 타당성에 직접적인 영향을 미친다. 그러므로 자원의 투자와 그 이익을 조사하고 위험에 대한 분석을 수행해야한다.")]),v._v(" "),t("p",[v._v("일반적으로 시스템 개발은 비용을 줄이고 생산성과 서비스를 향상 시키기 위해 행해진다.")]),v._v(" "),t("h3",{attrs:{id:"비용과-일정에-대한-제약-설정"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#비용과-일정에-대한-제약-설정"}},[v._v("#")]),v._v(" 비용과 일정에 대한 제약 설정")]),v._v(" "),t("p",[v._v("요구사항을 분석하는 분석가는 응용 분야에 대한 해박한 지식이 요구된다. 왜냐하면 개발 비용, 개발 일정, 시스템 성능에 대해 정확한 예측을 해야하기 떄문이다.")]),v._v(" "),t("p",[v._v("프로젝트 관리가 매우 중요하며 관리활동은 요구되는 자원과 성취해야할 임무, 소요 기간, 추적해야 할 이정표 등을 포함한다. SW 프로젝트 관리는 다른 공학에 비해 취약한 형편이다. 따라서 관리가 효율적으로 이루어질려면 각 기능과 소요 비용과 개발 기간의 예측, 제약 조건 및 위험에 대한 평가 등이 분석 단계나 계획 단계에서 이루어져야 한다.")]),v._v(" "),t("h3",{attrs:{id:"요구사항-정의-문서화"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#요구사항-정의-문서화"}},[v._v("#")]),v._v(" 요구사항 정의 문서화")]),v._v(" "),t("p",[v._v("유저의 요구사항과 시스템의 기능이 문서화되어야 한다. 이때의 산출물이 "),t("strong",[v._v("요구사항 명세서")]),v._v("가 된다. 기능 명세서, 목표 문서, 기능 요구서라고도 불리는 이 명세서는 분석가가 만드는 경우가 대부분이나, 고객과 함께 만드는 경우도 있다.")]),v._v(" "),t("p",[v._v("요구사항 명세서는 고객과 개발 회사의 계약서로도 쓰일 수 있고, 명세서를 통해서 추후에 발생하는 문제와 변화에 대한 책임이 명확히 규명될 수 있어야 한다. 이를 위해서 요구사항 명세서에 시스템에 연관된 당사자들이 동의하여 서명하고 그 다음 단계로 넘어가는 것이 바람직하다. 따라서 요구사항 명세서는 프로젝트와 관계된 모든 사람이 읽고 이해하기 쉽도록 쓰여져야 한다.")]),v._v(" "),t("h3",{attrs:{id:"소프트웨어-개발-실정"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#소프트웨어-개발-실정"}},[v._v("#")]),v._v(" 소프트웨어 개발 실정")]),v._v(" "),t("p",[v._v("제안서에 의해 계약이 이뤄지고 난 후 그대로 개발에 들어가는 경우가 많다. 즉, 구체적인 목표의 확립없이 구현을 시작한다. 설계와 프로그래밍 과정에서 새로운 요구사항이 나타나면 그때서 요구사항의 수정이 이뤄진다.")]),v._v(" "),t("p",[v._v("이러한 개발 방법으로 제대로 된 좋은 품질의 제품이 생산될 것인가 라는 의문이 생긴다. 이는 나중에 시스템이 완성 된 후 시험할 수 있는 근거를 잃을 수 있다. 왜냐 어떤 부분이 잘못되었는지 가릴 기준이 없기 때문이다.")]),v._v(" "),t("p",[t("strong",[v._v("요구사항 명세서")]),v._v("는 품질을 측정하는 기초가 되는 동시에 소프트웨어공학이 추구하는 고품질 소프트웨어를 만든다는 단일 목표에 접근할 수 있게 한다.")]),v._v(" "),t("p",[v._v("소프트웨어 시스템 개발이 실패로 끝나는 경우 실패의 이유를 조사하면 업무 분석이 잘못되었다는 이유이다. 따라서 구체적인 목표의 확립없이 개발에 들어갔다는 것을 의미한다. 목표가 구체적으로 명시되어 있지 않다면 프로젝트를 성공적으로 이끌기 어렵다는 것을 보여준다.")]),v._v(" "),t("p",[v._v("사용자의 관점과 엔지니어의 관점이 섞여있으면 프로젝트의 관리도 어렵고 좋은 품질의 제품도 만들 수 없다. 그러므로 사용자와 개발자 관점의 분리는 어느 공학에서든 요구되는 원칙이다.")]),v._v(" "),t("p",[v._v("결론은 분석과 설계에 충분한 노력을 들여야 한다.")]),v._v(" "),t("h2",{attrs:{id:"설계"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#설계"}},[v._v("#")]),v._v(" 설계")]),v._v(" "),t("p",[v._v("설계란 분석과정에서 모아진 요구사항을 설계도면에 옮기는 것이다. 분석과정을 개념적단계라 할때 설계 과정은 물리적 실현의 첫단계이다. 또한, 설계는 품질에 직접적인 영향을 미치며, 설계가 제대로 되지 않으면 안정감이 없는 시스템이 만들어진다. 안정감이 없는 시스템은 유지보수가 어렵고 조금만 변화가 가해진다면 견디지 못한다.")]),v._v(" "),t("p",[v._v("시스템을 만들며 중요하게 구분되어야 하는 것이 무엇(what)과 어떻게(how to)이다. 시스템 설계는 서브시스템들로 이뤄진 시스템 구조를 결정하고, 서브시스템들을 HW 및 SW 등의 구성요소들에게 할당한다.")]),v._v(" "),t("p",[v._v("소프트웨어 시스템 설계 단계의 결과물은 설계 문서를 뜻한다.")]),v._v(" "),t("h3",{attrs:{id:"설계-원칙"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#설계-원칙"}},[v._v("#")]),v._v(" 설계 원칙")]),v._v(" "),t("p",[v._v("시스템을 구성요소로 분할한다. 시스템의 구성요소들 사이에 주고 받는 정보의 소통이 최소화되고 각 구성요소의 독립성이 유지될 수 있도록 시스템을 분할해야한다.")]),v._v(" "),t("p",[v._v("이후 요구되는 성능과 자원에 대한 예측을 할 수 있어야 한다. 설계에서는 어떻게(how to) 그 문제를 해결할 것인가를 결정한다. 여기서 what과 how to를 나눠 보자."),t("br"),v._v("\n무엇(what) : 사용자나 시스템의 기능, 사용자의 관점"),t("br"),v._v("\n어떻게(how to) : 기능의 수행 방법, 엔지니어의 관점")]),v._v(" "),t("p",[v._v("비용, 소요 시간, 용량, 그리고 신뢰성 등에 대한 연구를 통해서 현실과 예산에 맞는 최적의 설계 방법을 선택해야한다. 이 방법을 trade-off란 단어로 표현한다.")]),v._v(" "),t("p",[v._v("소프트웨어 개발도 요구사항 명세서와 설계 문서가 나온 다음 프로그래밍에 들어가는 것이 원칙이다.")]),v._v(" "),t("h2",{attrs:{id:"구현"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#구현"}},[v._v("#")]),v._v(" 구현")]),v._v(" "),t("p",[v._v("설계 단계에서 나온 설계 문서를 시스템 설계 모습으로 변환시키는 것이다. 이러한 과정을 통해서 시스템의 기능이 수행 가능한 모습으로 나타난다. 이 과정은 건축의 시공 단계에 해당되며, 설계가 세부적인 방법으로 수행된다. 그 결과물로 소프트웨어 제품이 나올 수 있다. 즉, 구현은 프로그래밍 또는 코딩이라고 부른다.")]),v._v(" "),t("p",[v._v("구현 과정이 설계 이전 과정보다 비용이 더 많이 든다. 시스템 개발 과정 중 프로그래밍에 드는 비용은 평균 20%, 40~50%의 비용이 요구사항 분석과 설계에 들어간다. 이 비율은 요구사항 분석과 설계가 가지는 중요성을 보여준다.")]),v._v(" "),t("p",[v._v("소프트웨어 시스템 구현시 부딪히는 어려움은 대부분 분석과 설계의 잘못에 의한 것이다. 설계가 제대로 이뤄지면 시스템 구현은 상대적으로 단순하고 기계적인 과정인 것을 알 수 있다.")]),v._v(" "),t("h2",{attrs:{id:"시험"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#시험"}},[v._v("#")]),v._v(" 시험")]),v._v(" "),t("p",[v._v("어느 제품이든 품질에 대한 중요성은 강조해야한다. 우수한 품질의 제품을 얻기 위해서는 제품이 개발되는 공정 과정마다 품질 보증을 위한 절차를 따라야 한다. 공식적인 검토회 등을 통해 필터링 작업이 필요하다.")]),v._v(" "),t("p",[v._v("시스템 시험은 품질보증 활동의 중요한 일부분이며 그 임무는 사용자 요구사항, 설계, 구현의 전 과정에 대한 최종 점검을 포함한다. 시험은 제품의 오류를 발견하고 수정하는 과정이며, 시스템 개발 전체 과정에 대하여 체계적으로 점검할 수 있는 일련의 활동들의 집합이다. 시험을 하지 않았을 때 나타나는 문제점과 과다한 비용을 생각하여 보면, 시험 하는 데 드는 비용의 정당성을 찾을 수 있다.")]),v._v(" "),t("h3",{attrs:{id:"소프트웨어-시스템-시험"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#소프트웨어-시스템-시험"}},[v._v("#")]),v._v(" 소프트웨어 시스템 시험")]),v._v(" "),t("p",[v._v("사용자 요구사항, 설계, 코딩의 전 과정에 대한 점검이며, 소프트웨어 개발 비용 중 40% 이상을 차지하는 경우가 흔하다. 체계적인 소프트웨어 시스템 테스트를 하기 위해서는 테스트 계획이 만들어져야한다. 이 테스트 계획은 최소한의 시간과 비용을 투자해서 최대한의 확률로 오류를 찾아낼 수 있도록 만들어져야 한다.")]),v._v(" "),t("h3",{attrs:{id:"소프트웨어-테스트-유형"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#소프트웨어-테스트-유형"}},[v._v("#")]),v._v(" 소프트웨어 테스트 유형")]),v._v(" "),t("p",[v._v("프로그램의 기본 단위인 모듈에 대한 테스트를 시험하는 "),t("code",[v._v("단위 시험(unit test)")]),v._v("가 있으며, 모듈들을 통합하여 프로그램에 대한 "),t("code",[v._v("통합 시험(integration test)")]),v._v("을 한다. 그 이후 소프트웨어와 다른 시스템 요소(HW, 다른 SW) 등 모든 요소들이 조화를 이루어 시스템 기능을 만족하는지 확인하는 "),t("code",[v._v("시스템 시험(system test)")]),v._v("을 한다. 마지막으로, 고객이 참여하여 요구사항 만족 여부를 검증하는 "),t("code",[v._v("인수시험(acceptance test)")]),v._v("이 있다.")]),v._v(" "),t("h3",{attrs:{id:"소프트웨어-테스트-프로세스"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#소프트웨어-테스트-프로세스"}},[v._v("#")]),v._v(" 소프트웨어 테스트 프로세스")]),v._v(" "),t("p",[v._v("체계적인 소프트웨어 테스트를 하기 위해서는 어떻게 테스트를 수행할지 계획을 세워서 "),t("strong",[v._v("시험 계획(test plan) 단계")]),v._v(", 시험에 사용되는 데이터를 준비하는 "),t("strong",[v._v("테스트 설계(test design) 단계")]),v._v(", 소프트웨어 입력하여 결과를 얻어내는 "),t("strong",[v._v("테스트 실행(test execution) 단계")]),v._v(", 테스트에서 얻어낸 결과를 분석하고 기록하는 "),t("strong",[v._v("평가(test result analysis and evaluation) 단계")]),v._v(". 총 4개의 프로세스를 거쳐야한다.")]),v._v(" "),t("h3",{attrs:{id:"yourdon이-주장하는-생존을-위한-6가지-기술"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#yourdon이-주장하는-생존을-위한-6가지-기술"}},[v._v("#")]),v._v(" Yourdon이 주장하는 생존을 위한 6가지 기술")]),v._v(" "),t("ul",[t("li",[v._v("객체지향 개발 방법 (Object-Oriented Methods)")]),v._v(" "),t("li",[v._v("CASE 도구 활용 (CASE Tools)")]),v._v(" "),t("li",[v._v("소프트웨어 품질 보증 (Software Quality Assurance)")]),v._v(" "),t("li",[v._v("구조적 방법 (Structured Methods)")]),v._v(" "),t("li",[v._v("소프트웨어 개발 및 품질의 계량화  (Software Metrics)")]),v._v(" "),t("li",[v._v("리엔지니어링 (Re-Engineering)")])]),v._v(" "),t("h2",{attrs:{id:"유지보수"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#유지보수"}},[v._v("#")]),v._v(" 유지보수")]),v._v(" "),t("p",[v._v("제품의 유지보스는 사용 중 발생하는 여러 변경 사항에 대해 적응하는 활동이며 변화에 대비하는 과정이다. 소프트웨 유지보수는 4가지로 그 활동이 요약이 된다.")]),v._v(" "),t("ul",[t("li",[v._v("잘못된 것을 수정하는 유지보수")]),v._v(" "),t("li",[v._v("시스템을 새 환경에 적응시키는 유지보수")]),v._v(" "),t("li",[v._v("새로운 기능을 추가하는 유지보수")]),v._v(" "),t("li",[v._v("미래의 시스템 관리를 위한 유지보수")])]),v._v(" "),t("p",[v._v("소프트웨어 시스템의 유지보수를 위해 시스템 변경에 의한 재 요구분석, 재 설계, 재 구현, 재 시험이 필요하게 되고, 관련된 문서의 수정까지도 수반하기 때문에 체계적인 관리 기능이 필요하다.")]),v._v(" "),t("h3",{attrs:{id:"소프트웨어-유지보수"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#소프트웨어-유지보수"}},[v._v("#")]),v._v(" 소프트웨어 유지보수")]),v._v(" "),t("p",[v._v("소프트웨어 시스템은 개발할 때부터 유지보수에 대비하여 만들어져야 한다. 왜냐 잘 설계된 시스템도 유지보수에 드는 비용이 실제 개발 비용보다 많이 드는 경우가 대부분이다.")]),v._v(" "),t("p",[v._v("유지보수 비용은 개발 당시에는 빙산처럼 노출된 작은 부분만 보인다. 실제 유지보수를 하게 되면 수면 아래의 거대한 부분이 드러난다. 계속 이용하고 발전되어야 하는 소프트웨어 시스템이 빈약하게 설계되고 문서화되어 잇지 않을 대 이를 유지보수해야 하는 엔지니어들과 사용하는 고객들이 겪는 불편함이 크다.")]),v._v(" "),t("p",[v._v("따라서 탄탄한 계획과 절차에 의한 시스템 제작이 중요하다. 소프트웨어가 건축이나 다른 공학에 비해 유연성을 가지고있지만 그 유연성이 남용된다면 유지보수가 불가능한 상황까지 갈 수 있다.")]),v._v(" "),t("h3",{attrs:{id:"건축-공학과-소프트웨어-공학-비교"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#건축-공학과-소프트웨어-공학-비교"}},[v._v("#")]),v._v(" 건축 공학과 소프트웨어 공학 비교")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("건축 공학")]),v._v(" "),t("th",[v._v("소프트웨어 공학")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("계획")]),v._v(" "),t("td",[v._v("계획")])]),v._v(" "),t("tr",[t("td",[v._v("건물 사용자 요구사항 분석")]),v._v(" "),t("td",[v._v("소프트웨어 사용자 요구사항 분석")])]),v._v(" "),t("tr",[t("td",[v._v("건물 설계")]),v._v(" "),t("td",[v._v("소프트웨어 설계")])]),v._v(" "),t("tr",[t("td",[v._v("시공")]),v._v(" "),t("td",[v._v("프로그래밍(코딩)")])]),v._v(" "),t("tr",[t("td",[v._v("감리")]),v._v(" "),t("td",[v._v("테스팅")])]),v._v(" "),t("tr",[t("td",[v._v("건물 유지보수")]),v._v(" "),t("td",[v._v("소프트웨어 유지보수")])])])]),v._v(" "),t("p",[v._v("건축 공학과 소프트웨어 공학 공정 과정 비교를 하면 위의 표와 같다. 즉, 위의 표가 소프트웨어의 생애주기(life cycle)이라고 할 수 있다.")]),v._v(" "),t("h3",{attrs:{id:"소프트웨어-품질과-우리의-미래"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#소프트웨어-품질과-우리의-미래"}},[v._v("#")]),v._v(" 소프트웨어 품질과 우리의 미래")]),v._v(" "),t("p",[v._v("소프트웨어 시스템들은 미래의 우리 사회를 지탱하는 중요한 기간 시스템들이 될 것이다. 이러한 기간 소프트웨어 시스템 개발도 탄탄한 계획과 절차에 의하여 구축하여야 한다. 처음부터 올바르게 만들지 않고는 품질 개선 노력과 품질 보증 활동이 성공적으로 이뤄질 수 없고 고품질의 제품과 서비스로 고객의 욕구를 만족시킬 수 없다.")]),v._v(" "),t("p",[v._v("각 기업에서 소프트웨어 시스템의 품질 보증을 위한 공정 과정과 품질 관리 체계를 확립해야 한다. 품질은 개발팀의 목적과 고객의 기대 및 요구와 직결되어 있다. 모든 엔지니어들과 관리자들이 소프트웨어 개발에 요구되는 체계적인 공정 과정에 대한 중요성을 인식하고, 품질 방침을 이해하여 이를 실천해 나가야 한다. 또한 정부나 기업에서도 제도적으로 그 공정을 과정을 지원해줘야한다.")]),v._v(" "),t("h2",{attrs:{id:"요약"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#요약"}},[v._v("#")]),v._v(" 요약")]),v._v(" "),t("p",[v._v("엔지니어링의 기본 원칙은 개발 과정이 수행되는 임무에 의해 분리되어야 한다.")]),v._v(" "),t("p",[v._v("소프트웨어 개발의 경우 "),t("code",[v._v("요구사항 분석 -> 설계 -> 프로그래밍 -> 시험 및 유지보수")]),v._v("로 이어지는 생명주기에 대하여 조사했다.")]),v._v(" "),t("p",[v._v("요구사항 분석과정에서 사용자에게 제공해야할 기능을 정의했다. 설계 단계부터는 요구사항에서 저으이된 기능을 어떻게 개발할 것인가에 초점을 둔다.")]),v._v(" "),t("p",[v._v("소프트웨어 시스템 개발도 개발 단계를 분리하여 높은 품질의 소프트웨어 개발을 할 수 있게 된다. 소프트웨어 공학은 개발 계획과 진행에 있어 단계별로 수행되어야 하는 임무를 규정한다.")]),v._v(" "),t("p",[v._v("시스템 개발은 프로젝트 중간 단계에서 나타나는 산출물을 요구하며, 중간 목표를 설정하고 각 과정을 수행해 나갈 때 최종 목표인 고품질의 소프트웨어가 만들어진다. 각 중간 목표에 대한 철저한 검증을 통해 잘못된 것을 여과하는 작업이 수행되어야 한다.")])])}),[],!1,null,null,null);_.default=r.exports}}]);