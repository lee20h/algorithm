(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{408:function(t,a,r){"use strict";r.r(a);var e=r(25),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"data-link-control-and-protocols"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#data-link-control-and-protocols"}},[t._v("#")]),t._v(" Data Link Control and Protocols")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("Flow Control"),r("br"),t._v("\n받는 사람의 buffer가 안 넘치게 함")])]),t._v(" "),r("li",[r("p",[t._v("Error Contorl"),r("br"),t._v("\n오류시에 계속 재전송")])])]),t._v(" "),r("h2",{attrs:{id:"stop-and-wait-arq"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#stop-and-wait-arq"}},[t._v("#")]),t._v(" Stop-and-Wait ARQ")]),t._v(" "),r("p",[t._v("Sender에서 Frame을 전송하고 Receiver는 받은 다음 ACK로 원하는 Frame을 요청하게 된다.Time-out을 둬서 답장이 안 오게 되면 재전송을 하며, 중복으로 받게되면 버리고 다시 ACK으로 요청하게 된다."),r("br"),t._v("\nPiggybacking"),r("br"),t._v("\nFrame에 ACK bit을 둬서 overhead을 최소화 하는 방법이다.")]),t._v(" "),r("h2",{attrs:{id:"go-back-n-arq"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#go-back-n-arq"}},[t._v("#")]),t._v(" Go-Back-N ARQ")]),t._v(" "),r("p",[t._v("n bit을 할당한 경우 Frame의 갯수는 0~2ⁿ-1"),r("br"),t._v("\nsender "),r("strong",[t._v("window size < 2ⁿ")]),t._v(" 여야 성립된다. receiver window size는 1이여야 한다.")]),t._v(" "),r("h2",{attrs:{id:"selective-repeat-arq"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#selective-repeat-arq"}},[t._v("#")]),t._v(" Selective-Repeat ARQ")]),t._v(" "),r("p",[t._v("ACK와 NAK을 둘 다 사용하며 Receiver의 Window size가 달라진다. 두 Window Size가 2ⁿ/2가 된다.")])])}),[],!1,null,null,null);a.default=n.exports}}]);