(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{424:function(i,a,t){"use strict";t.r(a);var l=t(25),e=Object(l.a)({},(function(){var i=this,a=i.$createElement,t=i._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":i.$parent.slotKey}},[t("h1",{attrs:{id:"클라우드-컴퓨팅의-속성"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#클라우드-컴퓨팅의-속성"}},[i._v("#")]),i._v(" 클라우드 컴퓨팅의 속성")]),i._v(" "),t("h2",{attrs:{id:"scalability-elasticity"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scalability-elasticity"}},[i._v("#")]),i._v(" Scalability & Elasticity")]),i._v(" "),t("ul",[t("li",[t("p",[i._v("Scalability : 서비스의 규모에 맞춰 시스템 네트워크나, 프로세스가 규모에 맞게 조정이 될 수 있는 특성")])]),i._v(" "),t("li",[t("p",[i._v("Elasticity : 수요에 맞춘 Scalability를 달성하는 시간")])])]),i._v(" "),t("p",[i._v("두 가지 특성을 달성하기 위해서 필요한 성격")]),i._v(" "),t("ul",[t("li",[i._v("Dynamic Provisioning : 요약하면 동적으로 서비스 동작 중에 자원을 준비하거나 업그레이드하는 것으로 이것을 만족해야 Scalability가 Elasticity하게 만족하는 것을 가능케한다.")])]),i._v(" "),t("p",[i._v("따라서 클라우딩 시스템을 이용해야 서비스 수요 곡선에 맞춰서 공급 곡선도 어느 정도의 여유를 가지고 따라가면서 부족하지도 낭비하지도 않은 곡선을 그릴 수 있게 된다.")]),i._v(" "),t("ul",[t("li",[i._v("Multi-tenant Design : 정해진 인프라를 Utilization을 높여서 필요할 때 나눠서 사용하는 디자인이다. 이때 virtually partition을 통해서 같은 인프라지만 고립시켜서 서로 독립적으로 사용하게 한다.")])]),i._v(" "),t("h2",{attrs:{id:"availability-reliability"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#availability-reliability"}},[i._v("#")]),i._v(" Availability & Reliability")]),i._v(" "),t("ul",[t("li",[t("p",[i._v("Availability : 서비스가 정상적으로 운영하는 정도. 예시로 Five Nines라는 말로 표현한다. 이 말은 99.999%의 Availability를 가진다고 한다.")])]),i._v(" "),t("li",[t("p",[i._v("Reliability : 서비스에게 기대하는 품질로, 기능이 원하는 품질로 작동하는 상태를 표현하는 단어이다. Availability를 얘기할 때 Reliability를 포함하고 있다.")])])]),i._v(" "),t("p",[i._v("이러한 특성을 만족하기 위해 Fault Tolerance라는 개념이 달성되어야 한다.")]),i._v(" "),t("ul",[t("li",[i._v("Fault Tolerance : 여러가지 결함을 견뎌내는 특성으로 대부분 "),t("strong",[i._v("이중화")]),i._v("(duplication)을 통해서 해결할려고 한다. 같은 서비스를 구동하는 예비 서버를 사용해서 결함이 일어났을 때 서비스를 계속 이용할 수 있도록 하는 Availability와 Reliability를 보장해주는 방법이다."),t("br"),i._v("\n기본 특성\n"),t("ul",[t("li",[i._v("No single point of failure : SPOF란 시스템의 구성요소 중 핵심 부분 하나를 의미한다. 예를 들어 여러 서버를 구동하나, 하나의 DB를 이용하는 경우 DB가 문제가 생긴 경우 서비스에 영향을 미친다는 것이다. 또 다른 예시를 보면 Load Balancer가 요청을 받고 서버의 상태를 보고 서버에 분산해준다. 이때 Load Balancer에 문제가 생긴다면 다른 서버들이 괜찮더라도 서비스에 영향을 미친다. 이러한 서버들은 duplication이 어렵다는 문제가 있다.")]),i._v(" "),t("li",[i._v("Fault detection and isolation(FDI) : 에러 발견을 빠르게 파악하는 구조와 내부적인 기능을 만드는 것(Fault detection)과 에러가 발생하더라도 다른 구조로 전파되지 않도록 하는 것(Fault Isolation). 따라서 문제가 생겨서 잘못된 요청을 받을 시 에러처리를 하지 않았다면 문제가 퍼져나갈 수 있다.")]),i._v(" "),t("li",[i._v("Fault Containment : Fault가 난 서비스가 스스로 Fault를 점검하여 문제가 있을 시 다른 서비스로 API 요청 등을 보내지 않는 서비스를 뜻한다.")])])])]),i._v(" "),t("p",[i._v("이중화(duplication)을 생각할 때는 무조건 모든 계층을 생각하여서 이중화해야 한다. 전력 공급원(물리적 서버)부터 서비스까지 모두 분리하여 복제해서 사용해야 Availability를 올릴 수 있다. 이때 클라우드 시스템을 사용하게되면 비용 효율적으로 달성할 수 있다.")]),i._v(" "),t("h2",{attrs:{id:"manageability-interoperability"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#manageability-interoperability"}},[i._v("#")]),i._v(" Manageability & Interoperability")]),i._v(" "),t("ul",[t("li",[t("p",[i._v("Manageability : 서비스를 관리하기 쉬운 정도로 클라우드에서 DB 서버를 사용하게 된다면 Managed DB를 쓰게 된다. 하드웨어를 다 고른 뒤 DBMS와 업데이트, 백업 기간을 정하게 되면 DB 서버를 만들 수 있게 된다. 이후에 하드웨어 업그레이드도 편하게 사용할 수 있다.")])]),i._v(" "),t("li",[t("p",[i._v("Interoperability : 상호 호환성으로, 다른 클라우드 시스템이나 머신이랑 동작할 수 있는 형태를 일반적인 인터페이스로 상호 작용할 수 있는 특성이다. AWS의 경우 API로써 다른 시스템과 상호 작용하기 편하게 되어있다.")])])]),i._v(" "),t("p",[i._v("두 가지 특성을 결합이 되면 Automation을 가능하게 한다. 클라우드에서 컨트롤이 가능한 것은 모두 자동화가 가능하다. 이것이 바로 Control Automation이다. 따라서 클라우드를 이용하면 소프트웨어를 가지고 모든 것을 컨트롤할 수 있는 시스템을 구성할 수 있다.")]),i._v(" "),t("h2",{attrs:{id:"performance-optimization"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#performance-optimization"}},[i._v("#")]),i._v(" Performance & Optimization")]),i._v(" "),t("ul",[t("li",[i._v("Performance : 물리 머신속 자원이 집중이 되는 경우 다른 서비스들은 성능이 떨어질 수 있다. 이러한 현상을 "),t("code",[i._v("Noise Neighborhood Side effect")]),i._v("라고 한다. 또한, IO 장치에서 문제가 있다. CPU나 메모리의 경우는 빠른 가상화가 가능하지만 Storage와 Network 장비 경우 속도가 느려 Performance 문제로 남아있다.")])]),i._v(" "),t("p",[i._v("이러한 Performance guarantees 문제를 해결하기 위해서 병렬화(Parallel computing)를 이용해서 해결하려고 한다.")]),i._v(" "),t("h2",{attrs:{id:"accessibility-portability"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#accessibility-portability"}},[i._v("#")]),i._v(" Accessibility & Portability")]),i._v(" "),t("ul",[t("li",[t("p",[i._v("Accessibility : 서비스에 대해 접근이 쉬운 정도로, http를 통해서 해결이 됐다. 클라우드에서는 모든 서비스의 엔드포인트를 일반적인 http나 https로 사용하므로, 인터넷이 가능한 곳에는 어디서든 접근이 가능하다.")])]),i._v(" "),t("li",[t("p",[i._v("Portability : 이동성을 뜻하는데 웹 서비스를 사용하므로, 특정한 기기에 종속적이지 않으며, 어떠한 장비든지 웹 서비스에 접근만 가능하다면 사용이 가능하다.")])])]),i._v(" "),t("h2",{attrs:{id:"클라우드-컴퓨팅의-이득"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#클라우드-컴퓨팅의-이득"}},[i._v("#")]),i._v(" 클라우드 컴퓨팅의 이득")]),i._v(" "),t("h3",{attrs:{id:"기업에서의-이득"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#기업에서의-이득"}},[i._v("#")]),i._v(" 기업에서의 이득")]),i._v(" "),t("ul",[t("li",[i._v("초기 투자자본의 감소")]),i._v(" "),t("li",[i._v("유지보수 비용의 감소")])]),i._v(" "),t("p",[i._v("앞의 두 가지는 클라우드의 초창기 이득이였지만, 이후에는 다음과 같은 이득에 집중했다.")]),i._v(" "),t("ul",[t("li",[t("strong",[i._v("기업의 특성에 집중")])]),i._v(" "),t("li",[i._v("자원(인적, 자본) 유용성 증가")])]),i._v(" "),t("h3",{attrs:{id:"개인의-이득"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#개인의-이득"}},[i._v("#")]),i._v(" 개인의 이득")]),i._v(" "),t("ul",[t("li",[i._v("개인의 자원 절약")]),i._v(" "),t("li",[i._v("여러 장비에서 접근 가능")])])])}),[],!1,null,null,null);a.default=e.exports}}]);