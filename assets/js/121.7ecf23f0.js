(window.webpackJsonp=window.webpackJsonp||[]).push([[121],{376:function(v,_,a){"use strict";a.r(_);var t=a(25),r=Object(t.a)({},(function(){var v=this,_=v.$createElement,a=v._self._c||_;return a("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[a("h1",{attrs:{id:"소프트웨어-개발에-대한-오해와-실체"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#소프트웨어-개발에-대한-오해와-실체"}},[v._v("#")]),v._v(" 소프트웨어 개발에 대한 오해와 실체")]),v._v(" "),a("h2",{attrs:{id:"소프트웨어-공학-정의"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#소프트웨어-공학-정의"}},[v._v("#")]),v._v(" 소프트웨어 공학 정의")]),v._v(" "),a("p",[v._v("소프트웨어 공학은 실제 효과적으로 작동할 수 있는 우수한 소프트웨어를 최적의 비용으로 얻기 위하여 사용하는 견고한 엔지니어링 원칙이다. 경영학, 경제학, 전산학 및 시스템 공학적인 문제 해결 원리에 기초한다. 허용되는 예산과 시간 범위 안에서 효과적으로 소프트웨어 제품을 개발하고 유지, 보수하는 활동과 관련된 기술적, 관리적 원리를 가지고 있다. 또, 소프트웨어 공학은 소프트웨어 시스템의 개발, 운용, 관리에 적용되는 체계적인 접근 방법이다.")]),v._v(" "),a("p",[v._v("소프트웨어 공학의 주요 목표는 소프트웨어 제품의 품질을 향상시키고 생산성 및 사용자 만족도를 증진시키는데 있다.")]),v._v(" "),a("h2",{attrs:{id:"소프트웨어와-관련된-질문들"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#소프트웨어와-관련된-질문들"}},[v._v("#")]),v._v(" 소프트웨어와 관련된 질문들")]),v._v(" "),a("ol",[a("li",[a("p",[v._v("소프트웨어 시스템을 개발하는데 드는 비용 중 프로그래밍에 드는 비용은 어느 정도인가? ans. 20%"),a("br"),v._v("\n-> 소프트웨어 시스템은 물리적보다 논리적인 요소들로 구성되어 있어서 건축은 약 80~90% 시공에 소요되지만, 소프트웨어는 20%정도 소요되고, 약 40~50%의 개발 비용이 프로그래밍 이전 단계에 소요된다. 따라서 수치화 하면 테스팅 40%, 프로그래밍 20%, 요구사항 분석과 디자인 40%으로 나뉜다.")])]),v._v(" "),a("li",[a("p",[v._v("중간 사이즈의 소프트웨어 시스템을 개발할 때 한 프로그래머가 일년에 만드는 실행코드는 평균 몇줄이나 될까? ans. 5,000줄 이하"),a("br"),v._v("\n-> 평균 하루에 10줄 정도 프로그램 작성, 일년으로 계산하면 3,000 ~ 4,000 줄 정도 실행코드를 만든다. 실제로 프로그래머가 짤 수 있는 프로그램의 양은 시스템의 크기, 응용 분야의 난이도에 따라 큰 차이를 보인다."),a("br"),v._v("\n통신 시스템의 일부인 교환기 소프트웨어나 운영체제 소프트웨어는 사무 처리용 소프트웨어보다 줄당 4배 이상의 비용이 소요된다. 왜냐하면 품질을 보증하기 위한 노력과 관계가 있다.")])]),v._v(" "),a("li",[a("p",[v._v("사용자에게 배달되는 소프트웨어 시스템의 실행코드 1000줄당 예상되는 오류의 갯수는? ans. 4개 미만"),a("br"),v._v("\n-> 개발하는 과정에서 발견되는 오류는 1000줄 마다 실행코드에 약 50 ~ 60개 정도 있고, 제품이 완료되어 배달된 후 발견되는 오류는 평균 4개 이하이다. 오류의 종류에 따라 커다란 문제점을 내포할 수 있다."),a("br"),v._v("\n소프트웨어의 많은 오류가 출고 이후에 발견되며, 출고 이전에 효과적으로 결함을 찾아내어 여과시키는 것은 소프트웨어의 품질보증을 위하여 필수적이다."),a("br"),v._v("\n따라서 소프트웨어의 품질은 생산성보다도 더 핵심적인 현안으로 떠오른다.")])]),v._v(" "),a("li",[a("p",[v._v("사용자가 발견하는 소프트웨어 시스템의 오류는 어떤 것에 기인하는 경우가 많은가? ans. 제안서와 사용자 요구사항에 대한 잘못된 이해"),a("br"),v._v("\n-> 소프트웨어 시스템 개발에 있어 가장 어려운 문제는 사용자가 무엇을 원하는지 정확히 정의 내리는 일이다. 성공의 열쇠는 무엇을 만들 것이고, 사용자에게 어떤 기능과 편리함을 제공할 수 있는가를 빠르고 효과적으로 파악하는 데 달려있다."),a("br"),v._v("\n목표가 정확히 분석되어 있지 않은 상황에서 개발에 들어간다면 시스템이 제대로 만들어 질 확률이 떨어진다. 프로그래밍을 서둘러 시작할수록 더 오랜 시간이 걸려 늦게 끝난다고 볼 수 있다.특히 개발 도중 새로운 요구사항이 계속적으로 추가된다면 체계적인 설계를 하지 못해 품질에 심각한 영향을 미친다. 따라서 개발 이전 목표를 구체적으로 확립하는 것이 성공의 열쇠라고 할 수 있다.")])]),v._v(" "),a("li",[a("p",[v._v("소프트웨어 시스템을 유지, 보수하는데 드는 비용이 개발비용의 몇 배정도 될까? ans. 2배"),a("br"),v._v("\n-> 소프트웨어 개발 비용보다 유지보수 관리비용이 더 많이 들어가지만, 개발 중에는 유지보수 비용이 과소평가 되기 쉽다. 이 비용은 얼마나 체계적으로 만들어졌느냐에 따라 반비례한다. 개발비용이 총 비용의 약 33%를 차지한다면 유지보수 비용은 약 67%를 차지한다.")])])]),v._v(" "),a("h3",{attrs:{id:"소프트웨어-현실"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#소프트웨어-현실"}},[v._v("#")]),v._v(" 소프트웨어 현실")]),v._v(" "),a("p",[v._v("소프트웨어는 눈에 보이지 않는다 해서 하드웨어 또는 시스템의 부속으로 딸려가는 부분으로 인식되어 있는 경우가 많다. 소프트웨어 시스템에 들어가는 비용은 제품의 가격에도 포함되지 않은 경우가 많다. 따라서 높은 품질의 소프트웨어 개발을 지원 제도와 인식의 변화가 필요하다.")]),v._v(" "),a("h3",{attrs:{id:"품질의-중요성"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#품질의-중요성"}},[v._v("#")]),v._v(" 품질의 중요성")]),v._v(" "),a("p",[v._v("품질 보증에 대한 계획적이고 체계적인 접근 방법의 적용은 필수적이다. 품질은 시스템을 개발하는 조직의 목적과, 시스템을 사용할 고객의 기대 및 요구와 깊은 관계가 있다.")]),v._v(" "),a("p",[v._v("조직의 어느 일부에 의해 향상될 수 없으며, 관리자의 품질에 대한 목표와 의지가 있을 때 가능하다. 관리자와 개발자 모두가 품질에 대한 원칙을 이해하고 실행할 때 품질을 향상시켜 나갈 수 있다. 즉, 만드는 사람의 관점만 가지고는 품질이 향상될 수 없고, 사용자의 관점이 제품에 반영될 떄 품질 향상이 가능하다.")]),v._v(" "),a("h2",{attrs:{id:"소프트웨어의-위기"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#소프트웨어의-위기"}},[v._v("#")]),v._v(" 소프트웨어의 위기")]),v._v(" "),a("p",[v._v("소프트웨어는 결정적인 전환점이나 발전 없이 느리고 점진적인 변화만 있어 왔다. 또한 개발 역사 동안 생산성이나 개발 방법에서 전환점이 없다. 따라서 현재의 엔지니어들이 아직도 30년 전과 비슷한 방법으로 소프트웨어 시스템을 개발하고 있는 경우가 흔하다.")]),v._v(" "),a("p",[v._v("소프트웨어의 위기는 이러한 30년간 전환전이 없었다는 것에 기인한다. 소프트웨어 개발 기술의 낙후함과 전문 인력 부족현상이 소프트웨어 위기 현상을 야기시켰다.")]),v._v(" "),a("h3",{attrs:{id:"소프트웨어-위기의-원인"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#소프트웨어-위기의-원인"}},[v._v("#")]),v._v(" 소프트웨어 위기의 원인")]),v._v(" "),a("ol",[a("li",[a("p",[v._v("소프트웨어 생산성이 사용자들의 서비스에 대한 요구를 따라가지 못한다.")]),v._v(" "),a("ul",[a("li",[v._v("고객의 기대치 상승했으나, 생산성 증대하지 못했다.")]),v._v(" "),a("li",[v._v("소프트웨어 프로젝트는 제안서에 의해 시작되었으나, 사용자의 요구사항에 대한 정확한 내용을 파악하기 어려운게 대부분이며, 확실한 요구사항과 목표를 세우기 어렵다.")]),v._v(" "),a("li",[v._v("사용자와 개발자간의 의견교환 미흡하다.")])])]),v._v(" "),a("li",[a("p",[v._v("소프트웨어 품질이 향상되지 못하고 유지보수가 힘들다.")]),v._v(" "),a("ul",[a("li",[v._v("사용자가 볼 수 있는 작동하는 시스템은 공정 후반부에 가서야 얻을 수 있다.")]),v._v(" "),a("li",[v._v("주요한 결점들이 후반부에 발견되어 시스템 전체에 큰 문제를 일으키는 경우가 많다.")]),v._v(" "),a("li",[v._v("소프트웨어 프로젝트는 공기 내에 끝내기 어려운 경우가 많다.")]),v._v(" "),a("li",[v._v("유지보수 많은 노력과 비용 소요")]),v._v(" "),a("li",[v._v("새로운 프로젝트 추진 어려움")]),v._v(" "),a("li",[v._v("시스템 개발에 있어 소프트웨어 비용이 하드웨어 비용을 능가한다.")]),v._v(" "),a("li",[v._v("소프트웨어 품질 관리는 하드웨어의 비해 힘들다.")])])]),v._v(" "),a("li",[a("p",[v._v("관리자나 엔지니어들이 새로운 기법들에 대하여 잘 모르며 과거의 경험에 의존하여 코딩에 접근한 경우가 많다.")])]),v._v(" "),a("li",[a("p",[v._v("새로운 기술에 대한 훈련이 없다.")])]),v._v(" "),a("li",[a("p",[v._v("기업에서 관리자와 개발자들에 대한 교육과 훈련을 지속적 제공해야한다.")])]),v._v(" "),a("li",[a("p",[v._v("소프트웨어 체계적인 접근 방법이 많지 않아 소프트웨어 품질 향상의 장애 요인이다.")])]),v._v(" "),a("li",[a("p",[v._v("객체지향 소프트웨어 개발 방법론이 소프트웨어 품질 향상 방법 중 하나이다.")])]),v._v(" "),a("li",[a("p",[v._v("프로젝트 개발 일정과 소요비용 예측이 매우 부정확하다.")]),v._v(" "),a("ul",[a("li",[v._v("다른 공학에 비해 과거의 경험과 자료가 적다.")]),v._v(" "),a("li",[v._v("일정과 비용 예측을 하는 중견관리자들의 경험이 부족하다.")])])])]),v._v(" "),a("h2",{attrs:{id:"소프트웨어-위기의-해결책"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#소프트웨어-위기의-해결책"}},[v._v("#")]),v._v(" 소프트웨어 위기의 해결책")]),v._v(" "),a("ol",[a("li",[a("p",[v._v("소프트웨어 시스템 개발은 일반적으로 인식되는 것보다 매우 어려운 일이다. 그 원인과 문제점에 대한 정확한 인식이 필요하다.")])]),v._v(" "),a("li",[a("p",[v._v("체게적인 소프트웨어 개발 방법의 필요성이나 중요성을 인식이 필요하다.")])]),v._v(" "),a("li",[a("p",[v._v("소프트웨어 개발은 기술적인 문제 뿐 아니라 관리적인 측면에서 조직적으로 문제를 극복하려는 노력을 요구한다.")])]),v._v(" "),a("li",[a("p",[v._v("참여한 모든 사람들이 문제점에 대한 정확한 인식과 목표를 가지고 그것을 해결하기 위한 방법과 과정을 공유해야한다.")])])]),v._v(" "),a("h2",{attrs:{id:"소프트웨어에-대한-오해"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#소프트웨어에-대한-오해"}},[v._v("#")]),v._v(" 소프트웨어에 대한 오해")]),v._v(" "),a("p",[v._v("소프트웨어와 관계가 있는 관리자, 고객, 엔지니어들이 가지고 있는 오해 분석")]),v._v(" "),a("p",[v._v("관점을 가볍게 읽어본다.")]),v._v(" "),a("p",[v._v("관리자의 오해 : 소프트웨어 개발에 관한 좋은 책들이 있고 책안에 개발 표준과 단계가 제시되어 우리에게 필요한 부분을 제공한다. 개발자들에게 필요한 최신 기계나 CASE 도구를 도입하였으니 좋은 제품을 빠른 시일 내에 개발이 가능할 것이다. 엔지니어들이 요구분석을 하고 있으면 생산적이지 못한 일을 하고 있는 줄 안다.")]),v._v(" "),a("p",[v._v("고객의 오해 : 목표에 대한 개략적인 기술만 하면 충분하며, 세부적인것은 나중에 채워 넣으면 된다. 사용자의 요구사항은 계속 변하며 소프트웨어는 유연하여 쉽게 변경을 수용할 수 있다.")]),v._v(" "),a("p",[v._v("엔지니어의 오해 : 일단 프로그램이 만들어지고 작동되면 우리의 임무는 끝난다. 시스템을 작동시켜 보기 전까지는 품질을 평가할 방법이 없다. 프로젝트의 결과는 작동하는 프로그램뿐이다.")]),v._v(" "),a("h2",{attrs:{id:"요약"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#요약"}},[v._v("#")]),v._v(" 요약")]),v._v(" "),a("p",[v._v("소프트웨어 공학이란 체계적인 공법을 적용하여, 최적의 비용으로 고품질의 소프트웨어 시스템을 개발하는 것이며, 단일 목표는 높은 품질의 제품을 만드는 것이다. 그 목표에 있어 많은 어려움이 있으며, 관리자, 고객 그리고 엔지니어들의 오해가 있다.")]),v._v(" "),a("p",[v._v("소프트웨어 개발은 기술적인 측면 뿐아니라 관리적인 측면에서 조직적으로 문제 극복 후 품질을 향상시키려는 노력을 요구한다. 따라서 참여한 모든 사람들이 무네점에 대한 정확한 인식과 목표를 가질 때 좋은 품질의 제품이 만들어지고 프로젝트는 성공적으로 완수할 수 있다.")])])}),[],!1,null,null,null);_.default=r.exports}}]);